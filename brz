#! /usr/bin/env python

# Copyright (C) 2005-2013, 2016, 2017 Canonical Ltd
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

from __future__ import absolute_import

"""Breezy -- a free distributed version-control tool"""

import os
import sys
import warnings

# update this on each release
_script_version = (2, 8, 0)

NEED_VERS = (2, 6)

if sys.version_info < NEED_VERS:
    sys.stderr.write("brz: error: cannot find a suitable python interpreter\n")
    sys.stderr.write("  (need %d.%d or later)\n" % NEED_VERS)
    sys.exit(1)


profiling = False
if '--profile-imports' in sys.argv:
    import profile_imports
    profile_imports.install()
    profiling = True


if os.name == "posix":
    import locale
    try:
        locale.setlocale(locale.LC_ALL, '')
    except locale.Error, e:
        sys.stderr.write('brz: warning: %s\n'
            '  brz could not set the application locale.\n'
            '  Although this should be no problem for brz itself, it might\n'
            '  cause problems with some plugins. To investigate the issue,\n'
            '  look at the output of the locale(1p) tool.\n' % e)
    # Use better default than ascii with posix filesystems that deal in bytes
    # natively even when the C locale or no locale at all is given. Note that
    # we need an immortal string for the hack, hence the lack of a hyphen.
    sys._brz_default_fs_enc = "utf8"


# The python2.6 release includes some libraries that have deprecation warnings
# against the interpreter - see https://bugs.launchpad.net/brz/+bug/387139
warnings.filterwarnings('ignore',
    r"(struct integer overflow masking is deprecated|"
    r"'L' format requires 0 <= number <= 4294967295)",
    DeprecationWarning,
    'gzip',
    )


# instruct brzlib/__init__.py to install lazy_regex
sys._brz_lazy_regex = True
try:
    import brzlib
except ImportError, e:
    sys.stderr.write("brz: ERROR: "
        "Couldn't import brzlib and dependencies.\n"
        "Please check the directory containing brzlib is on your PYTHONPATH.\n"
        "\n")
    raise

if brzlib.version_info[:3] != _script_version:
    sys.stderr.write(
        "brz: WARNING: brzlib version doesn't match the brz program.\n"
        "This may indicate an installation problem.\n"
        "brzlib is version %s from %s\n"
        "brz is version %s from %s\n" % (
        brzlib._format_version_tuple(brzlib.version_info),
        brzlib.__path__[0],
        brzlib._format_version_tuple(_script_version),
        __file__))


import brzlib.inspect_for_copy
brzlib.inspect_for_copy.import_copy_with_hacked_inspect()

import brzlib.breakin
brzlib.breakin.hook_debugger_to_signal()

import brzlib.decorators
if ('--lsprof' in sys.argv
    or '--lsprof-file' in sys.argv
    or '--profile' in sys.argv
    or '--lsprof-timed' in sys.argv):
    brzlib.decorators.use_pretty_decorators()
else:
    brzlib.decorators.use_fast_decorators()

import brzlib.commands
import brzlib.trace


if __name__ == '__main__':
    library_state = brzlib.initialize()
    library_state.__enter__()
    try:
        exit_val = brzlib.commands.main()
        if profiling:
            profile_imports.log_stack_info(sys.stderr)
    finally:
        library_state.__exit__(None, None, None)

    # By this point we really have completed everything we want to do, and
    # there's no point doing any additional cleanup.  Abruptly exiting here
    # stops any background threads getting into trouble as code is unloaded,
    # and it may also be slightly faster, through avoiding gc of objects that
    # are just about to be discarded anyhow.  This does mean that atexit hooks
    # won't run but we don't use them.  Also file buffers won't be flushed,
    # but our policy is to always close files from a finally block. -- mbp 20070215
    sys.exitfunc()
    os._exit(exit_val)
else:
    raise ImportError("The brz script cannot be imported.")
