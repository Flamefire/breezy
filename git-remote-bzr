#!/usr/bin/env python
# vim: expandtab

# Copyright (C) 2011 Jelmer Vernooij <jelmer@apache.org>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


"""Remote helper for git for accessing bzr repositories."""

CAPABILITIES = ["fetch", "option", "push", "import"]

import optparse
import os
import sys
import bzrlib
bzrlib.initialize()

from bzrlib.plugin import load_plugins
load_plugins()

from bzrlib.controldir import ControlDir

from bzrlib.plugins.git.object_store import (
    get_object_store,
    )
from bzrlib.plugins.git.refs import (
    BazaarRefsContainer,
    )

options = {}
transports = []

def cmd_capabilities(argv, name, remote_dir):
    sys.stdout.write("\n".join(CAPABILITIES)+"\n\n")
    sys.stdout.flush()


def cmd_list(argv, name, remote_dir):
    repo = remote_dir.find_repository()
    object_store = get_object_store(repo)
    object_store.lock_read()
    try:
        refs = BazaarRefsContainer(remote_dir, object_store)
        for k, v in refs.as_dict().iteritems():
            sys.stdout.write("%s %s\n" % (v, k))
        sys.stdout.write("\n")
    finally:
        object_store.unlock()
    sys.stdout.flush()


def cmd_option(argv, name, remote_dir):
    sys.stdout.write("unsupported\n")
    sys.stdout.flush()


batchcmd = None
wants = {}
def cmd_fetch(argv, name, remote_dir):
    global batchcmd, wants
    if batchcmd not in (None, "fetch"):
        raise Exception("fetch command inside other batch command")
    wants[argv[1]] = argv[2]
    batchcmd = "fetch"


def fetch(wants, name, remote_dir):
    # FIXME
    sys.stdout.write("\n")
    sys.stdout.flush()


commands = {
    "capabilities": cmd_capabilities,
    "list": cmd_list,
    "option": cmd_option,
    "fetch": cmd_fetch,
    }

parser = optparse.OptionParser()
(opts, args) = parser.parse_args()
(shortname, url) = args

remote_dir = ControlDir.open(url)

while True:
    l = sys.stdin.readline()
    if not l:
        break
    argv = l.strip().split()
    if argv == []:
        if batchcmd == "fetch":
            fetch(wants, shortname, remote_dir)
        else:
            raise AssertionError("invalid batch %r" % batchcmd)
    else:
        try:
           commands[argv[0]](argv, shortname, remote_dir)
        except KeyError:
           raise Exception("Unknown remote command %r" % argv)
