Origin: commit, revision id: jelmer@jelmer.uk-20190215183122-mx4uhtkbwf5dtxyd
Author: Jelmer VernooÄ³ <jelmer@jelmer.uk>
Last-Update: 2019-02-15
Applied-Upstream: no
X-Bzr-Revision-Id: jelmer@jelmer.uk-20190215183122-mx4uhtkbwf5dtxyd

=== modified file 'breezy/git/tests/test_branch.py'
--- old/breezy/git/tests/test_branch.py	2019-01-19 17:13:53 +0000
+++ new/breezy/git/tests/test_branch.py	2019-02-15 18:31:22 +0000
@@ -112,6 +112,7 @@
         reva = self.simple_commit_a()
         self.build_tree(['b'])
         r = GitRepo(".")
+        self.addCleanup(r.close)
         r.stage("b")
         revb = r.do_commit(b"b", committer=b"Somebody <foo@example.com>")
 
@@ -129,6 +130,7 @@
         o.tag_timezone = 0
         o.tag_time = 42
         r = GitRepo(".")
+        self.addCleanup(r.close)
         r.object_store.add_object(o)
         r[b'refs/tags/foo'] = o.id
         thebranch = Branch.open('.')
@@ -138,6 +140,7 @@
     def test_tag(self):
         reva = self.simple_commit_a()
         r = GitRepo(".")
+        self.addCleanup(r.close)
         r.refs[b"refs/tags/foo"] = reva
         thebranch = Branch.open('.')
         self.assertEqual({"foo": default_mapping.revision_id_foreign_to_bzr(reva)},
@@ -221,6 +224,7 @@
     def test_sprouted_tags(self):
         path, gitsha = self.make_onerev_branch()
         r = GitRepo(path)
+        self.addCleanup(r.close)
         r.refs[b"refs/tags/lala"] = r.head()
         oldrepo = Repository.open(path)
         revid = oldrepo.get_mapping().revision_id_foreign_to_bzr(gitsha)
@@ -231,6 +235,7 @@
     def test_sprouted_ghost_tags(self):
         path, gitsha = self.make_onerev_branch()
         r = GitRepo(path)
+        self.addCleanup(r.close)
         r.refs[b"refs/tags/lala"] = b"aa" * 20
         oldrepo = Repository.open(path)
         revid = oldrepo.get_mapping().revision_id_foreign_to_bzr(gitsha)
@@ -238,7 +243,7 @@
             self.clone_git_branch, path, "f")
         self.assertEqual({}, newbranch.tags.get_tag_dict())
         # Dulwich raises a UserWarning for tags with invalid target
-        self.assertEqual(1, len(warnings))
+        self.assertIn(('ref refs/tags/lala points at non-present sha ' + ("aa" * 20), ), [w.args for w in warnings])
 
     def test_interbranch_pull(self):
         path, (gitsha1, gitsha2) = self.make_tworev_branch()
@@ -272,6 +277,7 @@
     def test_interbranch_pull_with_tags(self):
         path, (gitsha1, gitsha2) = self.make_tworev_branch()
         gitrepo = GitRepo(path)
+        self.addCleanup(gitrepo.close)
         gitrepo.refs[b"refs/tags/sometag"] = gitsha2
         oldrepo = Repository.open(path)
         revid1 = oldrepo.get_mapping().revision_id_foreign_to_bzr(gitsha1)

