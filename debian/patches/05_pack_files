Origin: commit, revision id: jelmer@jelmer.uk-20181013132105-3idhbgxls1uim8ia
Author: Jelmer VernooÄ³ <jelmer@jelmer.uk>
Bug: https://launchpad.net/bugs/1796218
Last-Update: 2018-10-13
Applied-Upstream: no
X-Bzr-Revision-Id: jelmer@jelmer.uk-20181013132105-3idhbgxls1uim8ia

=== modified file 'breezy/git/tests/test_transportgit.py'
--- old/breezy/git/tests/test_transportgit.py	2018-06-14 17:59:16 +0000
+++ new/breezy/git/tests/test_transportgit.py	2018-10-13 13:21:05 +0000
@@ -37,6 +37,19 @@
         PackBasedObjectStoreTests.tearDown(self)
         TestCaseWithTransport.tearDown(self)
 
+    def test_prefers_pack_listdir(self):
+        self.store.add_object(make_object(Blob, data=b"data"))
+        self.assertEqual(0, len(self.store.packs))
+        self.store.pack_loose_objects()
+        self.assertEqual(1, len(self.store.packs))
+        packname = list(self.store.packs)[0].name()
+        self.assertEqual({'pack-%s.pack' % packname.decode('ascii'), 'pack-%s.idx' % packname.decode('ascii')},
+                         set(self.store._pack_names()))
+        self.store.transport.put_bytes_non_atomic('info/packs',
+                b'P foo-pack.pack\n')
+        self.assertEqual({'pack-%s.pack' % packname.decode('ascii'), 'pack-%s.idx' % packname.decode('ascii')},
+                         set(self.store._pack_names()))
+
     def test_remembers_packs(self):
         self.store.add_object(make_object(Blob, data=b"data"))
         self.assertEqual(0, len(self.store.packs))

=== modified file 'breezy/git/transportgit.py'
--- old/breezy/git/transportgit.py	2018-08-04 17:32:58 +0000
+++ new/breezy/git/transportgit.py	2018-10-05 16:17:49 +0000
@@ -164,7 +164,7 @@
                 return {}
             try:
                 first_line = next(iter(f)).rstrip()
-                if (first_line.startswith("# pack-refs") and " peeled" in
+                if (first_line.startswith(b"# pack-refs") and b" peeled" in
                         first_line):
                     for sha, name, peeled in read_packed_refs_with_peeled(f):
                         self._packed_refs[name] = sha
@@ -600,20 +600,21 @@
 
     def _pack_names(self):
         try:
-            f = self.transport.get('info/packs')
-        except NoSuchFile:
             return self.pack_transport.list_dir(".")
-        else:
-            with f:
-                ret = []
-                for line in f.read().splitlines():
-                    if not line:
-                        continue
-                    (kind, name) = line.split(b" ", 1)
-                    if kind != b"P":
-                        continue
-                    ret.append(name)
-                return ret
+        except TransportNotPossible:
+            try:
+                f = self.transport.get('info/packs')
+            except NoSuchFile:
+                # Hmm, warn about running 'git update-server-info' ?
+                return iter([])
+            else:
+                # TODO(jelmer): Move to top-level after dulwich
+                # 0.19.7 is released.
+                from dulwich.object_store import read_packs_file
+                with f:
+                    return read_packs_file(f)
+        except NoSuchFile:
+            return iter([])
 
     def _remove_pack(self, pack):
         self.pack_transport.delete(os.path.basename(pack.index.path))

