Origin: commit, revision id: jelmer@jelmer.uk-20190206054437-r31j9ceb2uy299ps
Author: Jelmer VernooÄ³ <jelmer@jelmer.uk>
Last-Update: 2019-02-06
Applied-Upstream: no
X-Bzr-Revision-Id: jelmer@jelmer.uk-20190206054437-r31j9ceb2uy299ps

=== modified file 'breezy/builtins.py'
--- old/breezy/builtins.py	2019-01-27 18:48:32 +0000
+++ new/breezy/builtins.py	2019-02-04 01:01:24 +0000
@@ -6831,6 +6831,184 @@
             cmd_reconcile().run(".")
 
 
+class cmd_grep(Command):
+    """Print lines matching PATTERN for specified files and revisions.
+
+    This command searches the specified files and revisions for a given
+    pattern.  The pattern is specified as a Python regular expressions[1].
+
+    If the file name is not specified, the revisions starting with the
+    current directory are searched recursively. If the revision number is
+    not specified, the working copy is searched. To search the last committed
+    revision, use the '-r -1' or '-r last:1' option.
+
+    Unversioned files are not searched unless explicitly specified on the
+    command line. Unversioned directores are not searched.
+
+    When searching a pattern, the output is shown in the 'filepath:string'
+    format. If a revision is explicitly searched, the output is shown as
+    'filepath~N:string', where N is the revision number.
+
+    --include and --exclude options can be used to search only (or exclude
+    from search) files with base name matches the specified Unix style GLOB
+    pattern.  The GLOB pattern an use *, ?, and [...] as wildcards, and \\
+    to quote wildcard or backslash character literally. Note that the glob
+    pattern is not a regular expression.
+
+    [1] http://docs.python.org/library/re.html#regular-expression-syntax
+    """
+
+    encoding_type = 'replace'
+    takes_args = ['pattern', 'path*']
+    takes_options = [
+        'verbose',
+        'revision',
+        Option('color', type=text_type, argname='when',
+               help='Show match in color. WHEN is never, always or auto.'),
+        Option('diff', short_name='p',
+               help='Grep for pattern in changeset for each revision.'),
+        ListOption('exclude', type=text_type, argname='glob', short_name='X',
+                   help="Skip files whose base name matches GLOB."),
+        ListOption('include', type=text_type, argname='glob', short_name='I',
+                   help="Search only files whose base name matches GLOB."),
+        Option('files-with-matches', short_name='l',
+               help='Print only the name of each input file in '
+               'which PATTERN is found.'),
+        Option('files-without-match', short_name='L',
+               help='Print only the name of each input file in '
+               'which PATTERN is not found.'),
+        Option('fixed-string', short_name='F',
+               help='Interpret PATTERN is a single fixed string (not regex).'),
+        Option('from-root',
+               help='Search for pattern starting from the root of the branch. '
+               '(implies --recursive)'),
+        Option('ignore-case', short_name='i',
+               help='Ignore case distinctions while matching.'),
+        Option('levels',
+               help='Number of levels to display - 0 for all, 1 for collapsed '
+               '(1 is default).',
+               argname='N',
+               type=_parse_levels),
+        Option('line-number', short_name='n',
+               help='Show 1-based line number.'),
+        Option('no-recursive',
+               help="Don't recurse into subdirectories. (default is --recursive)"),
+        Option('null', short_name='Z',
+               help='Write an ASCII NUL (\\0) separator '
+               'between output lines rather than a newline.'),
+        ]
+
+    @display_command
+    def run(self, verbose=False, ignore_case=False, no_recursive=False,
+            from_root=False, null=False, levels=None, line_number=False,
+            path_list=None, revision=None, pattern=None, include=None,
+            exclude=None, fixed_string=False, files_with_matches=False,
+            files_without_match=False, color=None, diff=False):
+        from breezy import _termcolor
+        from . import grep
+        import re
+        if path_list is None:
+            path_list = ['.']
+        else:
+            if from_root:
+                raise errors.BzrCommandError(
+                    'cannot specify both --from-root and PATH.')
+
+        if files_with_matches and files_without_match:
+            raise errors.BzrCommandError(
+                'cannot specify both '
+                '-l/--files-with-matches and -L/--files-without-matches.')
+
+        global_config = _mod_config.GlobalConfig()
+
+        if color is None:
+            color = global_config.get_user_option('grep_color')
+
+        if color is None:
+            color = 'never'
+
+        if color not in ['always', 'never', 'auto']:
+            raise errors.BzrCommandError('Valid values for --color are '
+                                         '"always", "never" or "auto".')
+
+        if levels is None:
+            levels = 1
+
+        print_revno = False
+        if revision is not None or levels == 0:
+            # print revision numbers as we may be showing multiple revisions
+            print_revno = True
+
+        eol_marker = '\n'
+        if null:
+            eol_marker = '\0'
+
+        if not ignore_case and grep.is_fixed_string(pattern):
+            # if the pattern isalnum, implicitly use to -F for faster grep
+            fixed_string = True
+        elif ignore_case and fixed_string:
+            # GZ 2010-06-02: Fall back to regexp rather than lowercasing
+            #                pattern and text which will cause pain later
+            fixed_string = False
+            pattern = re.escape(pattern)
+
+        patternc = None
+        re_flags = re.MULTILINE
+        if ignore_case:
+            re_flags |= re.IGNORECASE
+
+        if not fixed_string:
+            patternc = grep.compile_pattern(
+                pattern.encode(grep._user_encoding), re_flags)
+
+        if color == 'always':
+            show_color = True
+        elif color == 'never':
+            show_color = False
+        elif color == 'auto':
+            show_color = _termcolor.allow_color()
+
+        opts = grep.GrepOptions()
+
+        opts.verbose = verbose
+        opts.ignore_case = ignore_case
+        opts.no_recursive = no_recursive
+        opts.from_root = from_root
+        opts.null = null
+        opts.levels = levels
+        opts.line_number = line_number
+        opts.path_list = path_list
+        opts.revision = revision
+        opts.pattern = pattern
+        opts.include = include
+        opts.exclude = exclude
+        opts.fixed_string = fixed_string
+        opts.files_with_matches = files_with_matches
+        opts.files_without_match = files_without_match
+        opts.color = color
+        opts.diff = False
+
+        opts.eol_marker = eol_marker
+        opts.print_revno = print_revno
+        opts.patternc = patternc
+        opts.recursive = not no_recursive
+        opts.fixed_string = fixed_string
+        opts.outf = self.outf
+        opts.show_color = show_color
+
+        if diff:
+            # options not used:
+            # files_with_matches, files_without_match
+            # levels(?), line_number, from_root
+            # include, exclude
+            # These are silently ignored.
+            grep.grep_diff(opts)
+        elif revision is None:
+            grep.workingtree_grep(opts)
+        else:
+            grep.versioned_grep(opts)
+
+
 def _register_lazy_builtins():
     # register lazy builtins from other modules; called at startup and should
     # be only called once.

=== modified file 'breezy/git/revspec.py'
--- old/breezy/git/revspec.py	2018-11-11 04:08:32 +0000
+++ new/breezy/git/revspec.py	2019-02-03 01:42:11 +0000
@@ -40,12 +40,9 @@
     :param hex: Hex string to validate
     :return: Boolean
     """
-    import binascii
     try:
-        binascii.unhexlify(hex)
-    except TypeError:
-        return False
-    except binascii.Error:
+        int(hex, 16)
+    except ValueError:
         return False
     else:
         return True

=== modified file 'breezy/git/tests/test_blackbox.py'
--- old/breezy/git/tests/test_blackbox.py	2019-01-02 18:49:15 +0000
+++ new/breezy/git/tests/test_blackbox.py	2019-02-06 05:44:37 +0000
@@ -308,6 +308,7 @@
         self.repo.stage("foo")
         self.repo.do_commit(
             b"message", committer=b"Somebody <user@example.com>",
+            author=b"Somebody <user@example.com>",
             commit_timestamp=1526330165, commit_timezone=0,
             author_timestamp=1526330165, author_timezone=0,
             merge_heads=[b'aa' * 20])

=== modified file 'breezy/git/tests/test_revspec.py'
--- old/breezy/git/tests/test_revspec.py	2018-11-11 04:08:32 +0000
+++ new/breezy/git/tests/test_revspec.py	2019-02-03 01:42:11 +0000
@@ -32,3 +32,4 @@
 
     def test_valid(self):
         self.assertTrue(valid_git_sha1(b"aabbccddee"))
+        self.assertTrue(valid_git_sha1(b"aabbccd"))

=== modified file 'breezy/git/transportgit.py'
--- old/breezy/git/transportgit.py	2018-11-11 14:23:06 +0000
+++ new/breezy/git/transportgit.py	2019-02-06 05:44:37 +0000
@@ -36,6 +36,7 @@
 from dulwich.object_store import (
     PackBasedObjectStore,
     PACKDIR,
+    read_packs_file,
     )
 from dulwich.pack import (
     MemoryPackIndex,
@@ -587,16 +588,41 @@
                 ret.append(l)
             return ret
 
-    @property
-    def packs(self):
-        # FIXME: Never invalidates.
-        if not self._pack_cache:
-            self._update_pack_cache()
-        return self._pack_cache.values()
-
     def _update_pack_cache(self):
-        for pack in self._load_packs():
-            self._pack_cache[pack._basename] = pack
+        pack_files = set()
+        pack_dir_contents = self._pack_names()
+        for name in pack_dir_contents:
+            if name.startswith("pack-") and name.endswith(".pack"):
+                # verify that idx exists first (otherwise the pack was not yet
+                # fully written)
+                idx_name = os.path.splitext(name)[0] + ".idx"
+                if idx_name in pack_dir_contents:
+                    pack_files.add(os.path.splitext(name)[0])
+
+        new_packs = []
+        for basename in pack_files:
+            pack_name = basename + ".pack"
+            if basename not in self._pack_cache:
+                try:
+                    size = self.pack_transport.stat(pack_name).st_size
+                except TransportNotPossible:
+                    f = self.pack_transport.get(pack_name)
+                    pd = PackData(pack_name, f)
+                else:
+                    pd = PackData(
+                        pack_name, self.pack_transport.get(pack_name),
+                        size=size)
+                idxname = basename + ".idx"
+                idx = load_pack_index_file(
+                    idxname, self.pack_transport.get(idxname))
+                pack = Pack.from_objects(pd, idx)
+                pack._basename = basename
+                self._pack_cache[basename] = pack
+                new_packs.append(pack)
+        # Remove disappeared pack files
+        for f in set(self._pack_cache) - pack_files:
+            self._pack_cache.pop(f).close()
+        return new_packs
 
     def _pack_names(self):
         try:
@@ -608,9 +634,6 @@
                 # Hmm, warn about running 'git update-server-info' ?
                 return iter([])
             else:
-                # TODO(jelmer): Move to top-level after dulwich
-                # 0.19.7 is released.
-                from dulwich.object_store import read_packs_file
                 with f:
                     return read_packs_file(f)
         except NoSuchFile:
@@ -619,26 +642,10 @@
     def _remove_pack(self, pack):
         self.pack_transport.delete(os.path.basename(pack.index.path))
         self.pack_transport.delete(pack.data.filename)
-
-    def _load_packs(self):
-        ret = []
-        for name in self._pack_names():
-            if name.startswith("pack-") and name.endswith(".pack"):
-                try:
-                    size = self.pack_transport.stat(name).st_size
-                except TransportNotPossible:
-                    f = self.pack_transport.get(name)
-                    pd = PackData(name, f)
-                else:
-                    pd = PackData(name, self.pack_transport.get(name),
-                                  size=size)
-                idxname = name.replace(".pack", ".idx")
-                idx = load_pack_index_file(
-                    idxname, self.pack_transport.get(idxname))
-                pack = Pack.from_objects(pd, idx)
-                pack._basename = idxname[:-4]
-                ret.append(pack)
-        return ret
+        try:
+            del self._pack_cache[os.path.basename(pack._basename)]
+        except KeyError:
+            pass
 
     def _iter_loose_objects(self):
         for base in self.transport.list_dir('.'):
@@ -702,7 +709,7 @@
         idx = load_pack_index_file(basename + ".idx", idxfile)
         final_pack = Pack.from_objects(p, idx)
         final_pack._basename = basename
-        self._add_known_pack(basename, final_pack)
+        self._add_cached_pack(basename, final_pack)
         return final_pack
 
     def move_in_thin_pack(self, f):
@@ -735,8 +742,6 @@
             write_pack_index_v2(idxfile, entries, data_sum)
         finally:
             idxfile.close()
-        # TODO(jelmer): Just add new pack to the cache
-        self._flush_pack_cache()
 
     def add_pack(self):
         """Add a new pack to this object store.

=== renamed file 'breezy/plugins/grep/grep.py' => 'breezy/grep.py'
--- old/breezy/plugins/grep/grep.py	2018-11-21 03:20:30 +0000
+++ new/breezy/grep.py	2019-02-04 01:01:24 +0000
@@ -1,5 +1,5 @@
 # Copyright (C) 2010 Canonical Ltd
-#
+
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
@@ -12,36 +12,35 @@
 #
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 
 from __future__ import absolute_import
 
 import re
 
-from ...lazy_import import lazy_import
+from .lazy_import import lazy_import
 lazy_import(globals(), """
 from fnmatch import fnmatch
 
 from breezy._termcolor import color_string, FG
 
 from breezy import (
+    diff,
+    )
+""")
+from . import (
     controldir,
-    diff,
     errors,
-    lazy_regex,
+    osutils,
     revision as _mod_revision,
-    )
-""")
-from breezy import (
-    osutils,
     trace,
     )
-from breezy.revisionspec import (
+from .revisionspec import (
     RevisionSpec,
     RevisionSpec_revid,
     RevisionSpec_revno,
     )
-from breezy.sixish import (
+from .sixish import (
     BytesIO,
     )
 
@@ -52,6 +51,42 @@
     """Raised when a revision is not on left-hand history."""
 
 
+class GrepOptions(object):
+    """Container to pass around grep options.
+
+    This class is used as a container to pass around user option and
+    some other params (like outf) to processing functions. This makes
+    it easier to add more options as grep evolves.
+    """
+    verbose = False
+    ignore_case = False
+    no_recursive = False
+    from_root = False
+    null = False
+    levels = None
+    line_number = False
+    path_list = None
+    revision = None
+    pattern = None
+    include = None
+    exclude = None
+    fixed_string = False
+    files_with_matches = False
+    files_without_match = False
+    color = None
+    diff = False
+
+    # derived options
+    recursive = None
+    eol_marker = None
+    patternc = None
+    sub_patternc = None
+    print_revno = None
+    fixed_string = None
+    outf = None
+    show_color = False
+
+
 def _rev_on_mainline(rev_tuple):
     """returns True is rev tuple is on mainline"""
     if len(rev_tuple) == 1:

=== removed directory 'breezy/plugins/grep'
=== removed file 'breezy/plugins/grep/.bzrignore'
--- old/breezy/plugins/grep/.bzrignore	2010-06-08 03:05:42 +0000
+++ new/breezy/plugins/grep/.bzrignore	1970-01-01 00:00:00 +0000
@@ -1,1 +0,0 @@
-./build

=== removed file 'breezy/plugins/grep/NEWS'
--- old/breezy/plugins/grep/NEWS	2017-07-30 16:59:50 +0000
+++ new/breezy/plugins/grep/NEWS	1970-01-01 00:00:00 +0000
@@ -1,73 +0,0 @@
-This is the NEWS file from bzr-grep from before it was merged into bzr core.
-For changes before then, please refer to the main bzr log file.
-
-bzr-grep 0.5.0-final - Unreleased
-==================================
-* ``bzr grep`` now supports ``--diff|-p`` option to search through
-  changesets. (Parth Malwankar, #540705)
-
-* Option ``grep_color`` can be set in ``breezy.conf`` instead of using
-  the option ``--color`` from the command line. (Johan Dahlin)
-
-bzr-grep 0.4.0-final - 08-Jun-2010
-==================================
-* Add seperate output formatter to reduce duplication of search loops,
-  additionally make -Fi use regexp rather than lowercasing pattern and
-  entirety of text for the same reason. This also fixes bug #590589
-  - UnicodeDecodeError with options -Fi. (Martin [gz])
-
-* Added fast path for no match that avoids splitting the file text into
-  seperate lines and testing each one, by checking the entire text for a
-  possible match initially. (Martin [gz])
-
-* Added Makefile. (Parth Malwankar)
-
-* Fixed setup.py to work correctly. (Martin [gz])
-
-bzr-grep 0.3.0-final - 23-May-2010
-==================================
-* Support for --color option (POSIX only). (Parth Malwankar, #571694)
-
-* Revisions in branches without trees can now be searched with
-  -r option. (Parth Malwankar, #584240)
-
-* Trying to search working tree for a treeless branch no longer
-  produces a stack trace but gives an error message suggesting use of
-  -r option. (Parth Malwankar, #572658)
-
-bzr-grep 0.2.0-final - 30-Mar-2010
-==================================
-* 'binary file skipped' warning is not shows without --verbose flag
-  (Parth Malwankar, #539031)
-
-* Added support for -F/--fixed-string for faster search.
-  Simple patterns [a-zA-Z0-9 _] are now implicitly -F and searched faster.
-  (Parth Malwankar, #539263)
-
-* Better unicode handling. bzr-grep no longer crashes with UnicodeDecode
-  error for some outputs. (Parth Malwankar, #539258)
-
-* Faster grep for revision range. bzr-grep now caches results for
-  files that have not changed between revisions.
-  (Parth Malwankar, #542375)
-
-* Faster grep for specific revision. (Parth Malwankar, #539429)
-
-* Significant performance improvement. Working tree grep for bzr.dev
-  has gone from ~7.5s to ~1s. (Parth Malwankar, #539028)
-
-* Support for -L/--files-without-match and -l/files-with-matches
-  (Parth Malwankar, #540097)
-
-bzr-grep 0.1.0-final - 14-Mar-2010
-==================================
-* --recursive is now default. (Parth Malwankar, #536688)
-
-* ``bzr grep`` searches working copy by default. (Parth Malwankar, #537072)
-
-* --include/exclude=GLOB is now supported. (Parth Malwankar, #529889)
-
-bzr-grep 0.0.1-final - 10-Mar-2010
-==================================
-* Initial release (Parth Malwankar)
-

=== removed file 'breezy/plugins/grep/__init__.py'
--- old/breezy/plugins/grep/__init__.py	2018-11-11 04:08:32 +0000
+++ new/breezy/plugins/grep/__init__.py	1970-01-01 00:00:00 +0000
@@ -1,38 +0,0 @@
-# Copyright (C) 2010 Canonical Ltd
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-
-"""Print lines matching PATTERN for specified files and revisions."""
-
-from __future__ import absolute_import
-
-from ... import version_info  # noqa: F401
-from ...commands import plugin_cmds
-
-plugin_cmds.register_lazy("cmd_grep", [], "breezy.plugins.grep.cmds")
-
-
-def test_suite():
-    from ...tests import TestUtil
-
-    suite = TestUtil.TestSuite()
-    loader = TestUtil.TestLoader()
-    testmod_names = [
-        'test_grep',
-        ]
-
-    suite.addTest(loader.loadTestsFromModuleNames(
-        ["%s.%s" % (__name__, tmn) for tmn in testmod_names]))
-    return suite

=== removed file 'breezy/plugins/grep/cmds.py'
--- old/breezy/plugins/grep/cmds.py	2018-11-17 16:53:10 +0000
+++ new/breezy/plugins/grep/cmds.py	1970-01-01 00:00:00 +0000
@@ -1,254 +0,0 @@
-# Copyright (C) 2010 Canonical Ltd
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-
-"""Print lines matching PATTERN for specified files and revisions."""
-
-from __future__ import absolute_import
-
-from ... import errors
-from ...commands import Command, display_command
-from ...option import Option, ListOption
-from ...config import GlobalConfig
-
-from ...sixish import (
-    text_type,
-    )
-
-# FIXME: _parse_levels should be shared with breezy.builtins. this is a copy
-# to avoid the error
-#   "IllegalUseOfScopeReplacer: ScopeReplacer object '_parse_levels' was used
-#   incorrectly: Object already cleaned up, did you assign it to another
-#   variable?: _factory
-# with lazy import
-
-
-def _parse_levels(s):
-    try:
-        return int(s)
-    except ValueError:
-        msg = "The levels argument must be an integer."
-        raise errors.BzrCommandError(msg)
-
-
-class GrepOptions(object):
-    """Container to pass around grep options.
-
-    This class is used as a container to pass around user option and
-    some other params (like outf) to processing functions. This makes
-    it easier to add more options as grep evolves.
-    """
-    verbose = False
-    ignore_case = False
-    no_recursive = False
-    from_root = False
-    null = False
-    levels = None
-    line_number = False
-    path_list = None
-    revision = None
-    pattern = None
-    include = None
-    exclude = None
-    fixed_string = False
-    files_with_matches = False
-    files_without_match = False
-    color = None
-    diff = False
-
-    # derived options
-    recursive = None
-    eol_marker = None
-    patternc = None
-    sub_patternc = None
-    print_revno = None
-    fixed_string = None
-    outf = None
-    show_color = False
-
-
-class cmd_grep(Command):
-    """Print lines matching PATTERN for specified files and revisions.
-
-    This command searches the specified files and revisions for a given
-    pattern.  The pattern is specified as a Python regular expressions[1].
-
-    If the file name is not specified, the revisions starting with the
-    current directory are searched recursively. If the revision number is
-    not specified, the working copy is searched. To search the last committed
-    revision, use the '-r -1' or '-r last:1' option.
-
-    Unversioned files are not searched unless explicitly specified on the
-    command line. Unversioned directores are not searched.
-
-    When searching a pattern, the output is shown in the 'filepath:string'
-    format. If a revision is explicitly searched, the output is shown as
-    'filepath~N:string', where N is the revision number.
-
-    --include and --exclude options can be used to search only (or exclude
-    from search) files with base name matches the specified Unix style GLOB
-    pattern.  The GLOB pattern an use *, ?, and [...] as wildcards, and \\
-    to quote wildcard or backslash character literally. Note that the glob
-    pattern is not a regular expression.
-
-    [1] http://docs.python.org/library/re.html#regular-expression-syntax
-    """
-
-    encoding_type = 'replace'
-    takes_args = ['pattern', 'path*']
-    takes_options = [
-        'verbose',
-        'revision',
-        Option('color', type=text_type, argname='when',
-               help='Show match in color. WHEN is never, always or auto.'),
-        Option('diff', short_name='p',
-               help='Grep for pattern in changeset for each revision.'),
-        ListOption('exclude', type=text_type, argname='glob', short_name='X',
-                   help="Skip files whose base name matches GLOB."),
-        ListOption('include', type=text_type, argname='glob', short_name='I',
-                   help="Search only files whose base name matches GLOB."),
-        Option('files-with-matches', short_name='l',
-               help='Print only the name of each input file in '
-               'which PATTERN is found.'),
-        Option('files-without-match', short_name='L',
-               help='Print only the name of each input file in '
-               'which PATTERN is not found.'),
-        Option('fixed-string', short_name='F',
-               help='Interpret PATTERN is a single fixed string (not regex).'),
-        Option('from-root',
-               help='Search for pattern starting from the root of the branch. '
-               '(implies --recursive)'),
-        Option('ignore-case', short_name='i',
-               help='ignore case distinctions while matching.'),
-        Option('levels',
-               help='Number of levels to display - 0 for all, 1 for collapsed '
-               '(1 is default).',
-               argname='N',
-               type=_parse_levels),
-        Option('line-number', short_name='n',
-               help='show 1-based line number.'),
-        Option('no-recursive',
-               help="Don't recurse into subdirectories. (default is --recursive)"),
-        Option('null', short_name='Z',
-               help='Write an ASCII NUL (\\0) separator '
-               'between output lines rather than a newline.'),
-        ]
-
-    @display_command
-    def run(self, verbose=False, ignore_case=False, no_recursive=False,
-            from_root=False, null=False, levels=None, line_number=False,
-            path_list=None, revision=None, pattern=None, include=None,
-            exclude=None, fixed_string=False, files_with_matches=False,
-            files_without_match=False, color=None, diff=False):
-        from breezy import _termcolor
-        from . import grep
-        import re
-        if path_list is None:
-            path_list = ['.']
-        else:
-            if from_root:
-                raise errors.BzrCommandError(
-                    'cannot specify both --from-root and PATH.')
-
-        if files_with_matches and files_without_match:
-            raise errors.BzrCommandError('cannot specify both '
-                                         '-l/--files-with-matches and -L/--files-without-matches.')
-
-        global_config = GlobalConfig()
-
-        if color is None:
-            color = global_config.get_user_option('grep_color')
-
-        if color is None:
-            color = 'never'
-
-        if color not in ['always', 'never', 'auto']:
-            raise errors.BzrCommandError('Valid values for --color are '
-                                         '"always", "never" or "auto".')
-
-        if levels is None:
-            levels = 1
-
-        print_revno = False
-        if revision is not None or levels == 0:
-            # print revision numbers as we may be showing multiple revisions
-            print_revno = True
-
-        eol_marker = '\n'
-        if null:
-            eol_marker = '\0'
-
-        if not ignore_case and grep.is_fixed_string(pattern):
-            # if the pattern isalnum, implicitly use to -F for faster grep
-            fixed_string = True
-        elif ignore_case and fixed_string:
-            # GZ 2010-06-02: Fall back to regexp rather than lowercasing
-            #                pattern and text which will cause pain later
-            fixed_string = False
-            pattern = re.escape(pattern)
-
-        patternc = None
-        re_flags = re.MULTILINE
-        if ignore_case:
-            re_flags |= re.IGNORECASE
-
-        if not fixed_string:
-            patternc = grep.compile_pattern(
-                pattern.encode(grep._user_encoding), re_flags)
-
-        if color == 'always':
-            show_color = True
-        elif color == 'never':
-            show_color = False
-        elif color == 'auto':
-            show_color = _termcolor.allow_color()
-
-        GrepOptions.verbose = verbose
-        GrepOptions.ignore_case = ignore_case
-        GrepOptions.no_recursive = no_recursive
-        GrepOptions.from_root = from_root
-        GrepOptions.null = null
-        GrepOptions.levels = levels
-        GrepOptions.line_number = line_number
-        GrepOptions.path_list = path_list
-        GrepOptions.revision = revision
-        GrepOptions.pattern = pattern
-        GrepOptions.include = include
-        GrepOptions.exclude = exclude
-        GrepOptions.fixed_string = fixed_string
-        GrepOptions.files_with_matches = files_with_matches
-        GrepOptions.files_without_match = files_without_match
-        GrepOptions.color = color
-        GrepOptions.diff = False
-
-        GrepOptions.eol_marker = eol_marker
-        GrepOptions.print_revno = print_revno
-        GrepOptions.patternc = patternc
-        GrepOptions.recursive = not no_recursive
-        GrepOptions.fixed_string = fixed_string
-        GrepOptions.outf = self.outf
-        GrepOptions.show_color = show_color
-
-        if diff:
-            # options not used:
-            # files_with_matches, files_without_match
-            # levels(?), line_number, from_root
-            # include, exclude
-            # These are silently ignored.
-            grep.grep_diff(GrepOptions)
-        elif revision is None:
-            grep.workingtree_grep(GrepOptions)
-        else:
-            grep.versioned_grep(GrepOptions)

=== modified file 'breezy/plugins/propose/gitlabs.py'
--- old/breezy/plugins/propose/gitlabs.py	2019-02-02 17:36:19 +0000
+++ new/breezy/plugins/propose/gitlabs.py	2019-02-03 02:23:04 +0000
@@ -147,6 +147,7 @@
 
     def set_description(self, description):
         self._mr.description = description
+        self._mr.save()
 
     def _branch_url_from_project(self, project_id, branch_name):
         project = self._mr.manager.gitlab.projects.get(project_id)

=== modified file 'breezy/tests/__init__.py'
--- old/breezy/tests/__init__.py	2018-11-23 23:51:34 +0000
+++ new/breezy/tests/__init__.py	2019-02-03 23:43:20 +0000
@@ -4107,6 +4107,7 @@
         'breezy.tests.test_globbing',
         'breezy.tests.test_gpg',
         'breezy.tests.test_graph',
+        'breezy.tests.test_grep',
         'breezy.tests.test_groupcompress',
         'breezy.tests.test_hashcache',
         'breezy.tests.test_help',

=== renamed file 'breezy/plugins/grep/test_grep.py' => 'breezy/tests/test_grep.py'
--- old/breezy/plugins/grep/test_grep.py	2018-11-12 01:41:38 +0000
+++ new/breezy/tests/test_grep.py	2019-02-04 01:01:24 +0000
@@ -12,7 +12,7 @@
 #
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 
 from __future__ import absolute_import
 
@@ -20,11 +20,11 @@
 import re
 import unicodedata as ud
 
-from ... import tests, osutils
-from ...sixish import PY3
-from ..._termcolor import color_string, FG
+from .. import tests, osutils
+from ..sixish import PY3
+from .._termcolor import color_string, FG
 
-from ...tests.features import (
+from ..tests.features import (
     UnicodeFilenameFeature,
     )
 
@@ -2429,13 +2429,13 @@
         self.assertEqualDiff(subst_dates(out), '''\
 === revno:3 ===
   === modified file 'hello'
-    --- hello	YYYY-MM-DD HH:MM:SS +ZZZZ
-    +++ hello	YYYY-MM-DD HH:MM:SS +ZZZZ
+    --- hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
+    +++ hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
     +hello world!
 === revno:1 ===
   === added file 'hello'
-    --- hello	YYYY-MM-DD HH:MM:SS +ZZZZ
-    +++ hello	YYYY-MM-DD HH:MM:SS +ZZZZ
+    --- hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
+    +++ hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
 ''')
 
     def test_grep_diff_revision(self):
@@ -2448,8 +2448,8 @@
         self.assertEqualDiff(subst_dates(out), '''\
 === revno:3 ===
   === modified file 'hello'
-    --- hello	YYYY-MM-DD HH:MM:SS +ZZZZ
-    +++ hello	YYYY-MM-DD HH:MM:SS +ZZZZ
+    --- hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
+    +++ hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
     +hello world!
 ''')
 
@@ -2470,16 +2470,16 @@
         self.assertEqualDiff(subst_dates(out), '''\
 === revno:5 ===
   === modified file 'hello'
-    --- hello	YYYY-MM-DD HH:MM:SS +ZZZZ
-    +++ hello	YYYY-MM-DD HH:MM:SS +ZZZZ
+    --- hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
+    +++ hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
     +hello world!3
 === revno:4 ===
   === added file 'blah'
     +hello world!2
 === revno:3 ===
   === modified file 'hello'
-    --- hello	YYYY-MM-DD HH:MM:SS +ZZZZ
-    +++ hello	YYYY-MM-DD HH:MM:SS +ZZZZ
+    --- hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
+    +++ hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
     +hello world!1
 ''')
 
@@ -2496,8 +2496,8 @@
             "  === modified file 'hello'", fg=FG.BOLD_MAGENTA) + '\n'
         redhello = color_string('hello', fg=FG.BOLD_RED)
         diffstr = '''\
-    --- hello	YYYY-MM-DD HH:MM:SS +ZZZZ
-    +++ hello	YYYY-MM-DD HH:MM:SS +ZZZZ
+    --- hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
+    +++ hello\tYYYY-MM-DD HH:MM:SS +ZZZZ
     +hello world!
 '''
         diffstr = diffstr.replace('hello', redhello)

=== modified file 'doc/en/release-notes/brz-3.0.txt'
--- old/doc/en/release-notes/brz-3.0.txt	2019-02-02 22:23:40 +0000
+++ new/doc/en/release-notes/brz-3.0.txt	2019-02-03 23:49:59 +0000
@@ -93,6 +93,9 @@
  * The 'fastimport' plugin is now bundled with Breezy.
    (Jelmer VernooÄ³)
 
+ * The ``grep`` plugin has been merged into Breezy.
+   (Parth Malwankar, Martin Packman, Jelmer VernooÄ³)
+
  * The 'stats' plugin is now bundled with Breezy.
    (Jelmer VernooÄ³)
 

=== modified file 'setup.py'
--- old/setup.py	2019-01-24 00:23:01 +0000
+++ new/setup.py	2019-02-06 05:44:37 +0000
@@ -60,7 +60,7 @@
         # Technically, Breezy works without these two dependencies too. But there's
         # no way to enable them by default and let users opt out.
         'fastimport>=0.9.8',
-        'dulwich>=0.19.1',
+        'dulwich>=0.19.11',
         ],
     'extras_require': {
         'fastimport': [],

