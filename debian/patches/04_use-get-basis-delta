Description: Avoid CommitBuilder._basis_delta
Author: Jelmer Vernoij <jelmer@debian.org>
Status: submitted upstream

=== modified file 'bzrlib/tests/per_repository/test_commit_builder.py'
--- old/bzrlib/tests/per_repository/test_commit_builder.py	2011-12-22 16:17:28 +0000
+++ new/bzrlib/tests/per_repository/test_commit_builder.py	2012-01-23 01:53:23 +0000
@@ -284,6 +284,7 @@
             if not builder.supports_record_entry_contents:
                 raise tests.TestNotApplicable("CommitBuilder doesn't support "
                     "record_entry_contents")
+            builder.will_record_deletes()
             ie = inventory.make_entry('directory', '', None,
                     tree.get_root_id())
             delta, version_recorded, fs_hash = builder.record_entry_contents(
@@ -299,7 +300,7 @@
             if got_new_revision:
                 self.assertEqual(('', '', ie.file_id, ie), delta)
                 # The delta should be tracked
-                self.assertEqual(delta, builder._basis_delta[-1])
+                self.assertEqual(delta, builder.get_basis_delta()[-1])
             else:
                 self.assertEqual(None, delta)
             # Directories do not get hashed.
@@ -441,7 +442,7 @@
                 # the delta should be returned, and recorded in _basis_delta
                 delta = builder.record_delete("foo", "foo-id")
                 self.assertEqual(("foo", None, "foo-id", None), delta)
-                self.assertEqual(delta, builder._basis_delta[-1])
+                self.assertEqual(delta, builder.get_basis_delta()[-1])
                 builder.finish_inventory()
                 rev_id2 = builder.commit('delete foo')
             except:
@@ -463,13 +464,14 @@
         try:
             builder = tree.branch.get_commit_builder([rev_id])
             try:
+                builder.will_record_deletes()
                 delete_change = ('foo-id', ('foo', None), True, (True, False),
                     (tree.path2id(''), None), ('foo', None), ('file', None),
                     (False, None))
                 list(builder.record_iter_changes(tree, rev_id,
                     [delete_change]))
                 self.assertEqual(("foo", None, "foo-id", None),
-                    builder._basis_delta[0])
+                    builder.get_basis_delta()[0])
                 self.assertTrue(builder.any_changes())
                 builder.finish_inventory()
                 rev_id2 = builder.commit('delete foo')
@@ -866,6 +868,7 @@
                 if not builder.supports_record_entry_contents:
                     raise tests.TestNotApplicable("CommitBuilder doesn't "
                         "support record_entry_contents")
+                builder.will_record_deletes()
                 parent_tree = tree.basis_tree()
                 parent_tree.lock_read()
                 self.addCleanup(parent_tree.unlock)
@@ -913,7 +916,8 @@
                 if delta_against_basis:
                     expected_delta = (name, new_name, file_id, new_entry)
                     # The delta should be recorded
-                    self.assertEqual(expected_delta, builder._basis_delta[-1])
+                    self.assertEqual(expected_delta,
+                        builder.get_basis_delta()[-1])
                 else:
                     expected_delta = None
                 self.assertEqual(expected_delta, delta)
@@ -954,6 +958,7 @@
             # record_entry_contents.
             parent_ids = tree.get_parent_ids()
             builder = tree.branch.get_commit_builder(parent_ids)
+            builder.will_record_deletes()
             parent_tree = tree.basis_tree()
             parent_tree.lock_read()
             self.addCleanup(parent_tree.unlock)
@@ -975,15 +980,6 @@
                 self.assertEqualStat(result[2][1], tree_file_stat[1])
             else:
                 self.assertEqual([], result)
-            delta = builder._basis_delta
-            delta_dict = dict((change[2], change) for change in delta)
-            version_recorded = (file_id in delta_dict and
-                delta_dict[file_id][3] is not None and
-                delta_dict[file_id][3].revision == builder._new_revision_id)
-            if records_version:
-                self.assertTrue(version_recorded)
-            else:
-                self.assertFalse(version_recorded)
             self.assertIs(None, builder.new_inventory)
             builder.finish_inventory()
             if tree.branch.repository._format.supports_full_versioned_files:
@@ -993,6 +989,16 @@
                 self.assertEqual(inv_sha1, builder.inv_sha1)
             self.assertIs(None, builder.new_inventory)
             rev2 = builder.commit('')
+            delta = builder.get_basis_delta()
+            delta_dict = dict((change[2], change) for change in delta)
+            version_recorded = (file_id in delta_dict and
+                delta_dict[file_id][3] is not None and
+                delta_dict[file_id][3].revision == rev2)
+            if records_version:
+                self.assertTrue(version_recorded)
+            else:
+                self.assertFalse(version_recorded)
+
             new_inventory = builder.revision_tree().inventory
             new_entry = new_inventory[file_id]
             if delta_against_basis:

