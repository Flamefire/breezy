Origin: commit, revision id: jelmer@jelmer.uk-20181123030601-pxi6abp6b6gq8hi7
Author: Oleksandr Usov <oleksandr.usov@tibra.com>
Author: Jelmer VernooÄ³ <jelmer@jelmer.uk>
Author: Martin <gzlist@googlemail.com>
Last-Update: 2018-11-23
Applied-Upstream: no
X-Bzr-Revision-Id: jelmer@jelmer.uk-20181123030601-pxi6abp6b6gq8hi7

=== modified file 'apport/source_brz.py'
--- old/apport/source_brz.py	2017-07-30 16:59:50 +0000
+++ new/apport/source_brz.py	2018-11-18 19:48:57 +0000
@@ -24,7 +24,7 @@
         if line == '\n':
             blanks += 1
         brz_log_tail.append(line)
-        if blanks >= 2: 
+        if blanks >= 2:
             break
 
     brz_log_tail.reverse()
@@ -36,7 +36,7 @@
     if 'BrzPlugins' not in report:
         # may already be present in-process
         report['BrzPlugins'] = command_output(['brz', 'plugins', '-v'])
-        
+
     # by default assume brz crashes are upstream bugs; this relies on
     # having a brz entry under /etc/apport/crashdb.conf.d/
     report['CrashDB'] = 'brz'
@@ -49,5 +49,5 @@
     #attach_file_if_exists(report,
     #	os.path.join(dot_brz, 'locations.conf', 'BrzLocations')
 
-        
+
 # vim: expandtab shiftwidth=4

=== modified file 'breezy/_known_graph_py.py'
--- old/breezy/_known_graph_py.py	2018-11-12 01:41:38 +0000
+++ new/breezy/_known_graph_py.py	2018-11-23 02:42:39 +0000
@@ -19,7 +19,10 @@
 
 from __future__ import absolute_import
 
-import collections
+try:
+    from collections.abc import deque
+except ImportError:  # python < 3.7
+    from collections import deque
 from . import (
     errors,
     revision,
@@ -193,7 +196,7 @@
         # We use a deque rather than a simple list stack, to go for BFD rather
         # than DFD. So that if a longer path is possible, we walk it before we
         # get to the final child
-        pending = collections.deque([node])
+        pending = deque([node])
         while pending:
             node = pending.popleft()
             next_gdfo = node.gdfo + 1

=== modified file 'breezy/bzr/bzrdir.py'
--- old/breezy/bzr/bzrdir.py	2018-11-16 18:33:17 +0000
+++ new/breezy/bzr/bzrdir.py	2018-11-18 19:48:57 +0000
@@ -669,7 +669,7 @@
 
         This is true IF and ONLY IF the filename is part of the namespace
         reserved for bzr control dirs. Currently this is the '.bzr' directory
-        in the root of the root_transport. 
+        in the root of the root_transport.
         """
         # this might be better on the BzrDirFormat class because it refers to
         # all the possible bzrdir disk formats.

=== modified file 'breezy/bzr/dirstate.py'
--- old/breezy/bzr/dirstate.py	2018-11-12 01:41:38 +0000
+++ new/breezy/bzr/dirstate.py	2018-11-18 19:48:57 +0000
@@ -28,7 +28,7 @@
     WHOLE_NUMBER = {digit}, digit;
     BOOLEAN = "y" | "n";
     REVISION_ID = a non-empty utf8 string;
-    
+
     dirstate format = header line, full checksum, row count, parent details,
      ghost_details, entries;
     header line = "#bazaar dirstate flat format 3", NL;
@@ -3578,7 +3578,7 @@
         """Compare an entry and real disk to generate delta information.
 
         :param path_info: top_relpath, basename, kind, lstat, abspath for
-            the path of entry. If None, then the path is considered absent in 
+            the path of entry. If None, then the path is considered absent in
             the target (Perhaps we should pass in a concrete entry for this ?)
             Basename is returned as a utf8 string because we expect this
             tuple will be ignored, and don't want to take the time to

=== modified file 'breezy/bzr/index.py'
--- old/breezy/bzr/index.py	2018-11-12 01:41:38 +0000
+++ new/breezy/bzr/index.py	2018-11-18 19:48:57 +0000
@@ -310,7 +310,7 @@
     def finish(self):
         """Finish the index.
 
-        :returns: cBytesIO holding the full context of the index as it 
+        :returns: cBytesIO holding the full context of the index as it
         should be written to disk.
         """
         lines = [_SIGNATURE]

=== modified file 'breezy/bzr/inventory.py'
--- old/breezy/bzr/inventory.py	2018-11-16 11:37:47 +0000
+++ new/breezy/bzr/inventory.py	2018-11-22 22:15:05 +0000
@@ -29,9 +29,14 @@
 # created, but it's not for now.
 ROOT_ID = b"TREE_ROOT"
 
+try:
+    from collections.abc import deque
+except ImportError:  # python < 3.7
+    from collections import deque
+
+
 from ..lazy_import import lazy_import
 lazy_import(globals(), """
-import collections
 
 from breezy import (
     generate_ids,
@@ -690,7 +695,7 @@
             for name, ie in children:
                 yield name, ie
             return
-        children = collections.deque(children)
+        children = deque(children)
         stack = [(u'', children)]
         while stack:
             from_dir_relpath, children = stack[-1]
@@ -711,7 +716,7 @@
 
                 # But do this child first
                 new_children = sorted(viewitems(ie.children))
-                new_children = collections.deque(new_children)
+                new_children = deque(new_children)
                 stack.append((path, new_children))
                 # Break out of inner loop, so that we start outer loop with child
                 break
@@ -1480,7 +1485,7 @@
 
         if given [foo-id] we will include
             TREE_ROOT as interesting parents
-        and 
+        and
             foo-id, baz-id, frob-id, fringle-id
         As interesting ids.
         """
@@ -1559,7 +1564,7 @@
             # parent_to_children with at least the tree root.)
             return other
         cache = self._fileid_to_entry_cache
-        remaining_children = collections.deque(
+        remaining_children = deque(
             parent_to_children[self.root_id])
         while remaining_children:
             file_id = remaining_children.popleft()

=== modified file 'breezy/bzr/smart/message.py'
--- old/breezy/bzr/smart/message.py	2018-06-16 22:14:54 +0000
+++ new/breezy/bzr/smart/message.py	2018-11-22 22:15:05 +0000
@@ -16,7 +16,10 @@
 
 from __future__ import absolute_import
 
-import collections
+try:
+    from collections.abc import deque
+except ImportError:  # python < 3.7
+    from collections import deque
 
 from ... import (
     debug,
@@ -218,7 +221,7 @@
         MessageHandler.__init__(self)
         self.status = None
         self.args = None
-        self._bytes_parts = collections.deque()
+        self._bytes_parts = deque()
         self._body_started = False
         self._body_stream_status = None
         self._body = None

=== modified file 'breezy/bzr/smart/protocol.py'
--- old/breezy/bzr/smart/protocol.py	2018-11-12 01:41:38 +0000
+++ new/breezy/bzr/smart/protocol.py	2018-11-22 22:15:05 +0000
@@ -20,7 +20,11 @@
 
 from __future__ import absolute_import
 
-import collections
+try:
+    from collections.abc import deque
+except ImportError:  # python < 3.7
+    from collections import deque
+
 import struct
 import sys
 try:
@@ -432,7 +436,7 @@
         _StatefulDecoder.__init__(self)
         self.state_accept = self._state_accept_expecting_header
         self.chunk_in_progress = None
-        self.chunks = collections.deque()
+        self.chunks = deque()
         self.error = False
         self.error_in_progress = None
 

=== modified file 'breezy/bzr/workingtree.py'
--- old/breezy/bzr/workingtree.py	2018-11-16 18:33:17 +0000
+++ new/breezy/bzr/workingtree.py	2018-11-22 22:15:05 +0000
@@ -34,7 +34,10 @@
 
 from bisect import bisect_left
 import breezy
-import collections
+try:
+    from collections.abc import deque
+except ImportError:  # python < 3.7
+    from collections import deque
 import errno
 import itertools
 import operator
@@ -1039,7 +1042,7 @@
             # jam 20060527 The kernel sized tree seems equivalent whether we
             # use a deque and popleft to keep them sorted, or if we use a plain
             # list and just reverse() them.
-            children = collections.deque(children)
+            children = deque(children)
             stack = [(from_dir_id, u'', from_dir_abspath, children)]
             while stack:
                 (from_dir_id, from_dir_relpath, from_dir_abspath,
@@ -1114,7 +1117,7 @@
                     # But do this child first if recursing down
                     if recursive:
                         new_children = sorted(os.listdir(fap))
-                        new_children = collections.deque(new_children)
+                        new_children = deque(new_children)
                         stack.append((f_ie.file_id, fp, fap, new_children))
                         # Break out of inner loop,
                         # so that we start outer loop with child

=== modified file 'breezy/bzr/workingtree_4.py'
--- old/breezy/bzr/workingtree_4.py	2018-11-16 18:33:17 +0000
+++ new/breezy/bzr/workingtree_4.py	2018-11-18 19:48:57 +0000
@@ -1403,7 +1403,7 @@
 class ContentFilteringDirStateWorkingTree(DirStateWorkingTree):
     """Dirstate working tree that supports content filtering.
 
-    The dirstate holds the hash and size of the canonical form of the file, 
+    The dirstate holds the hash and size of the canonical form of the file,
     and most methods must return that.
     """
 

=== modified file 'breezy/config.py'
--- old/breezy/config.py	2018-11-16 12:08:41 +0000
+++ new/breezy/config.py	2018-11-18 19:48:57 +0000
@@ -2105,7 +2105,7 @@
         :param override_existing: Raise KeyErorr if False and something has
                 already been registered for that key. If True, ignore if there
                 is an existing key (always register the new value).
-        :param fallback: Whether this credential store should be 
+        :param fallback: Whether this credential store should be
                 used as fallback.
         """
         return super(CredentialStoreRegistry,
@@ -2125,7 +2125,7 @@
         :param override_existing: If True, replace the existing object
                 with the new one. If False, if there is already something
                 registered with the same key, raise a KeyError
-        :param fallback: Whether this credential store should be 
+        :param fallback: Whether this credential store should be
                 used as fallback.
         """
         return super(CredentialStoreRegistry, self).register_lazy(

=== modified file 'breezy/counted_lock.py'
--- old/breezy/counted_lock.py	2018-11-11 04:08:32 +0000
+++ new/breezy/counted_lock.py	2018-11-18 19:48:57 +0000
@@ -29,7 +29,7 @@
     This can be used with any object that provides a basic Lock interface,
     including LockDirs and OS file locks.
 
-    :ivar _token: While a write lock is held, this is the token 
+    :ivar _token: While a write lock is held, this is the token
         for it.
     """
 
@@ -81,7 +81,7 @@
 
         If the lock was originally acquired in read mode this will fail.
 
-        :param token: If given and the lock is already held, 
+        :param token: If given and the lock is already held,
             then validate that we already hold the real
             lock with this token.
 

=== modified file 'breezy/diff.py'
--- old/breezy/diff.py	2018-11-16 18:33:17 +0000
+++ new/breezy/diff.py	2018-11-18 19:48:57 +0000
@@ -447,10 +447,10 @@
     :param to_file: The output stream.
     :param specific_files: Include only changes to these files - None for all
         changes.
-    :param external_diff_options: If set, use an external GNU diff and pass 
+    :param external_diff_options: If set, use an external GNU diff and pass
         these options.
     :param extra_trees: If set, more Trees to use for looking up file ids
-    :param path_encoding: If set, the path will be encoded as specified, 
+    :param path_encoding: If set, the path will be encoded as specified,
         otherwise is supposed to be utf8
     :param format_cls: Formatter class (DiffTree subclass)
     """

=== modified file 'breezy/foreign.py'
--- old/breezy/foreign.py	2018-11-16 12:08:41 +0000
+++ new/breezy/foreign.py	2018-11-18 19:48:57 +0000
@@ -145,7 +145,7 @@
         """Serialize a foreign revision id for this VCS.
 
         :param foreign_revid: Foreign revision id
-        :return: Bytestring with serialized revid, will not contain any 
+        :return: Bytestring with serialized revid, will not contain any
             newlines.
         """
         raise NotImplementedError(self.serialize_foreign_revid)

=== modified file 'breezy/git/tests/test_git_remote_helper.py'
--- old/breezy/git/tests/test_git_remote_helper.py	2018-11-11 04:08:32 +0000
+++ new/breezy/git/tests/test_git_remote_helper.py	2018-11-21 03:39:28 +0000
@@ -130,6 +130,7 @@
         f = BytesIO()
         self.helper.cmd_import(f, ["import", "refs/heads/master"])
         self.assertEqual(
+            b'reset refs/heads/master\n'
             b'commit refs/heads/master\n'
             b'mark :1\n'
             b'committer Somebody <jrandom@example.com> 1330445983 +0000\n'

=== modified file 'breezy/globbing.py'
--- old/breezy/globbing.py	2018-11-12 01:41:38 +0000
+++ new/breezy/globbing.py	2018-11-18 19:48:57 +0000
@@ -297,9 +297,9 @@
     """A Globster that supports exception patterns.
 
     Exceptions are ignore patterns prefixed with '!'.  Exception
-    patterns take precedence over regular patterns and cause a 
-    matching filename to return None from the match() function.  
-    Patterns using a '!!' prefix are highest precedence, and act 
+    patterns take precedence over regular patterns and cause a
+    matching filename to return None from the match() function.
+    Patterns using a '!!' prefix are highest precedence, and act
     as regular ignores. '!!' patterns are useful to establish ignores
     that apply under paths specified by '!' exception patterns.
     """

=== modified file 'breezy/help_topics/__init__.py'
--- old/breezy/help_topics/__init__.py	2018-11-19 22:05:30 +0000
+++ new/breezy/help_topics/__init__.py	2018-11-20 23:50:57 +0000
@@ -526,10 +526,10 @@
 repository (a shared repository). Branches can be copied and merged.
 
 In addition, one branch may be bound to another one.  Binding to another
-branch indicates that commits which happen in this branch must also 
-happen in the other branch.  Breezy ensures consistency by not allowing 
-commits when the two branches are out of date.  In order for a commit 
-to succeed, it may be necessary to update the current branch using 
+branch indicates that commits which happen in this branch must also
+happen in the other branch.  Breezy ensures consistency by not allowing
+commits when the two branches are out of date.  In order for a commit
+to succeed, it may be necessary to update the current branch using
 ``brz update``.
 
 Related commands::

=== modified file 'breezy/plugins/bash_completion/bashcomp.py'
--- old/breezy/plugins/bash_completion/bashcomp.py	2018-11-16 11:54:55 +0000
+++ new/breezy/plugins/bash_completion/bashcomp.py	2018-11-18 19:48:57 +0000
@@ -422,7 +422,7 @@
     This command generates a shell function which can be used by bash to
     automatically complete the currently typed command when the user presses
     the completion key (usually tab).
-    
+
     Commonly used like this:
         eval "`brz bash-completion`"
     """

=== modified file 'breezy/plugins/fastimport/cmds.py'
--- old/breezy/plugins/fastimport/cmds.py	2018-11-11 04:08:32 +0000
+++ new/breezy/plugins/fastimport/cmds.py	2018-11-18 19:48:57 +0000
@@ -85,7 +85,7 @@
       bzr fast-import project.fi project.bzr
 
     Numerous commands are provided for generating a fast-import file
-    to use as input. 
+    to use as input.
     To specify standard input as the input stream, use a
     source name of '-' (instead of project.fi). If the source name
     ends in '.gz', it is assumed to be compressed in gzip format.

=== modified file 'breezy/plugins/fastimport/exporter.py'
--- old/breezy/plugins/fastimport/exporter.py	2018-11-16 18:40:46 +0000
+++ new/breezy/plugins/fastimport/exporter.py	2018-11-18 16:53:40 +0000
@@ -333,6 +333,7 @@
         self.revid_to_mark[revid] = mark
         file_cmds = self._get_filecommands(
             breezy.revision.NULL_REVISION, revid)
+        self.print_cmd(commands.ResetCommand(ref, None))
         self.print_cmd(self._get_commit_command(ref, mark, revobj, file_cmds))
 
     def emit_commit(self, revid, ref):
@@ -355,16 +356,15 @@
         ncommits = len(self.revid_to_mark)
         nparents = len(revobj.parent_ids)
         if nparents == 0:
-            if ncommits:
-                # This is a parentless commit but it's not the first one
-                # output. We need to create a new temporary branch for it
-                # otherwise git-fast-import will assume the previous commit
-                # was this one's parent
-                ref = self._next_tmp_ref()
             parent = breezy.revision.NULL_REVISION
         else:
             parent = revobj.parent_ids[0]
 
+        # For parentless commits we need to issue reset command first, otherwise
+        # git-fast-import will assume previous commit was this one's parent
+        if nparents == 0:
+            self.print_cmd(commands.ResetCommand(ref, None))
+
         # Print the commit
         mark = ncommits + 1
         self.revid_to_mark[revid] = mark
@@ -640,13 +640,3 @@
                                      'valid in git.', git_ref)
                         continue
                 self.print_cmd(commands.ResetCommand(git_ref, b":%d" % mark))
-
-    def _next_tmp_ref(self):
-        """Return a unique branch name. The name will start with "tmp"."""
-        prefix = 'tmp'
-        if prefix not in self.branch_names:
-            self.branch_names[prefix] = 0
-        else:
-            self.branch_names[prefix] += 1
-            prefix = '%s.%d' % (prefix, self.branch_names[prefix])
-        return 'refs/heads/%s' % prefix

=== modified file 'breezy/plugins/fastimport/tests/test_commands.py'
--- old/breezy/plugins/fastimport/tests/test_commands.py	2018-11-11 04:08:32 +0000
+++ new/breezy/plugins/fastimport/tests/test_commands.py	2018-11-21 02:13:23 +0000
@@ -59,7 +59,8 @@
         self.assertIsNot(b"bla", stream.read())
 
 
-fast_export_baseline_data = """commit refs/heads/master
+fast_export_baseline_data = """reset refs/heads/master
+commit refs/heads/master
 mark :1
 committer
 data 15
@@ -107,17 +108,16 @@
         tree.commit("pointless")
         data = self.run_bzr("fast-export br")[0]
         self.assertTrue(data.startswith(
-            'commit refs/heads/master\nmark :1\ncommitter'))
+            'reset refs/heads/master\n'
+            'commit refs/heads/master\n'
+            'mark :1\ncommitter'), data)
 
     def test_file(self):
         tree = self.make_branch_and_tree("br")
         tree.commit("pointless")
         data = self.run_bzr("fast-export br br.fi")[0]
         self.assertEquals("", data)
-        try:
-            self.assertPathExists("br.fi")
-        except AttributeError:  # bzr < 2.4
-            self.failUnlessExists("br.fi")
+        self.assertPathExists("br.fi")
 
     def test_tag_rewriting(self):
         tree = self.make_branch_and_tree("br")

=== modified file 'breezy/plugins/launchpad/__init__.py'
--- old/breezy/plugins/launchpad/__init__.py	2018-11-11 04:08:32 +0000
+++ new/breezy/plugins/launchpad/__init__.py	2018-11-18 19:48:57 +0000
@@ -17,7 +17,7 @@
 """Launchpad.net integration plugin for Bazaar.
 
 This plugin provides facilities for working with Bazaar branches that are
-hosted on Launchpad (http://launchpad.net).  It provides a directory service 
+hosted on Launchpad (http://launchpad.net).  It provides a directory service
 for referring to Launchpad branches using the "lp:" prefix.  For example,
 lp:bzr refers to the Bazaar's main development branch and
 lp:~username/project/branch-name can be used to refer to a specific branch.

=== modified file 'breezy/plugins/upload/__init__.py'
--- old/breezy/plugins/upload/__init__.py	2018-11-11 04:08:32 +0000
+++ new/breezy/plugins/upload/__init__.py	2018-11-18 19:48:57 +0000
@@ -32,7 +32,7 @@
 
     brz upload -r X  sftp://user@host/location/on/webserver
 
-bzr-upload, just as brz does, will remember the location where you upload the 
+bzr-upload, just as brz does, will remember the location where you upload the
 first time, so you don't need to specify it every time.
 
 If you need to re-upload the whole working tree for some reason, you can:
@@ -107,7 +107,7 @@
 It is possible to upload to a remote location from another remote location by
 specifying it with the --directory option:
 
-    brz upload sftp://public.example.com --directory sftp://private.example.com 
+    brz upload sftp://public.example.com --directory sftp://private.example.com
 
 This, together with --auto, can be used to upload when you push to your
 central branch, rather than when you commit to your local branch.

=== modified file 'breezy/repository.py'
--- old/breezy/repository.py	2018-11-11 04:08:32 +0000
+++ new/breezy/repository.py	2018-11-18 19:48:57 +0000
@@ -1144,7 +1144,7 @@
         :param callback_refs: A dict of check-refs to resolve and callback
             the check/_check method on the items listed as wanting the ref.
             see breezy.check.
-        :param check_repo: If False do not check the repository contents, just 
+        :param check_repo: If False do not check the repository contents, just
             calculate the data callback_refs requires and call them back.
         """
         return self._check(revision_ids=revision_ids, callback_refs=callback_refs,

=== modified file 'breezy/tests/blackbox/test_locale.py'
--- old/breezy/tests/blackbox/test_locale.py	2018-11-11 04:08:32 +0000
+++ new/breezy/tests/blackbox/test_locale.py	2018-11-22 02:01:59 +0000
@@ -17,6 +17,7 @@
 """Test that brz handles locales in a reasonable way"""
 
 import sys
+import unittest
 
 from breezy import (
     tests,
@@ -47,6 +48,27 @@
         cmd.extend(args)
         return self.run_bzr_subprocess(cmd, env_changes=env_changes)
 
+    @unittest.skipIf(sys.version_info[:2] < (3, 7), "python < 3.7 doesn't coerce utf-8")
+    def test_log_coerced_utf8(self):
+        self.disable_missing_extensions_warning()
+        out, err = self.run_log_quiet_long(
+            ['tree'],
+            # C is not necessarily the default locale, so set both LANG and
+            # LC_ALL explicitly because LC_ALL is preferred on (some?) Linux
+            # systems but only LANG is respected on Windows.
+            env_changes={
+                'LANG': 'C', 'LC_ALL': 'C', 'LC_CTYPE': None, 'LANGUAGE': None})
+        self.assertEqual(b'', err)
+        self.assertEqualDiff(b"""\
+------------------------------------------------------------
+revno: 1
+committer: \xd8\xac\xd9\x88\xd8\xac\xd9\x88 Meinel <juju@info.com>
+branch nick: tree
+timestamp: Thu 2006-08-24 20:28:17 +0000
+message:
+  Unicode \xc2\xb5 commit
+""", out)
+
     def test_log_C(self):
         self.disable_missing_extensions_warning()
         out, err = self.run_log_quiet_long(
@@ -54,8 +76,9 @@
             # C is not necessarily the default locale, so set both LANG and
             # LC_ALL explicitly because LC_ALL is preferred on (some?) Linux
             # systems but only LANG is respected on Windows.
-            env_changes={'LANG': 'C', 'LC_ALL': 'C', 'LC_CTYPE': None,
-                         'LANGUAGE': None})
+            env_changes={
+                'LANG': 'C', 'LC_ALL': 'C', 'LC_CTYPE': None,
+                'LANGUAGE': None, 'PYTHONCOERCECLOCALE': '0', 'PYTHONUTF8': '0'})
         self.assertEqual(b'', err)
         self.assertEqualDiff(b"""\
 ------------------------------------------------------------
@@ -71,7 +94,8 @@
         out, err = self.run_log_quiet_long(
             ['tree'],
             env_changes={'LANG': 'BOGUS', 'LC_ALL': None, 'LC_CTYPE': None,
-                         'LANGUAGE': None})
+                         'LANGUAGE': None, 'PYTHONCOERCECLOCALE': '0',
+                         'PYTHONUTF8': '0'})
         self.assertStartsWith(err, b'brz: warning: unsupported locale setting')
         self.assertEqualDiff(b"""\
 ------------------------------------------------------------

=== modified file 'breezy/tests/blackbox/test_uncommit.py'
--- old/breezy/tests/blackbox/test_uncommit.py	2018-07-17 21:50:43 +0000
+++ new/breezy/tests/blackbox/test_uncommit.py	2018-11-18 19:48:57 +0000
@@ -237,7 +237,7 @@
         script = ScriptRunner()
         script.run_script(self, """
 $ cd tree
-$ brz uncommit --force 
+$ brz uncommit --force
     2 ...
       second commit
 ...

=== modified file 'breezy/tests/http_utils.py'
--- old/breezy/tests/http_utils.py	2018-11-12 01:41:38 +0000
+++ new/breezy/tests/http_utils.py	2018-11-23 02:42:39 +0000
@@ -232,7 +232,7 @@
         code = None
         target = None
         for (rsource, rtarget, rcode) in self.redirections:
-            target, match = re.subn(rsource, rtarget, path)
+            target, match = re.subn(rsource, rtarget, path, count=1)
             if match:
                 code = rcode
                 break  # The first match wins

=== modified file 'breezy/tests/per_controldir_colo/__init__.py'
--- old/breezy/tests/per_controldir_colo/__init__.py	2018-11-11 04:08:32 +0000
+++ new/breezy/tests/per_controldir_colo/__init__.py	2018-11-18 19:48:57 +0000
@@ -18,7 +18,7 @@
 """BzrDir implementation tests for colocated branch support.
 
 These tests check the conformance of the colocated branches support.
-All bzrdir formats are tested - those that do not suppport colocated branches 
+All bzrdir formats are tested - those that do not suppport colocated branches
 have the test_unsupported tests run; the others have the test_supported tests
 run.
 """

=== modified file 'breezy/tests/per_controldir_colo/test_unsupported.py'
--- old/breezy/tests/per_controldir_colo/test_unsupported.py	2018-11-11 04:08:32 +0000
+++ new/breezy/tests/per_controldir_colo/test_unsupported.py	2018-11-18 19:48:57 +0000
@@ -16,7 +16,7 @@
 
 """Tests for bazaar control directories that do not support colocated branches.
 
-Colocated branch support is optional, and when it is not supported the methods 
+Colocated branch support is optional, and when it is not supported the methods
 and attributes colocated branch support added should fail in known ways.
 """
 

=== modified file 'breezy/tests/per_foreign_vcs/test_branch.py'
--- old/breezy/tests/per_foreign_vcs/test_branch.py	2018-11-11 04:08:32 +0000
+++ new/breezy/tests/per_foreign_vcs/test_branch.py	2018-11-18 19:48:57 +0000
@@ -49,8 +49,8 @@
 class ForeignBranchTests(TestCaseWithTransport):
     """Basic tests for foreign branch implementations.
 
-    These tests mainly make sure that the implementation covers the required 
-    bits of the API and returns reasonable values. 
+    These tests mainly make sure that the implementation covers the required
+    bits of the API and returns reasonable values.
     """
     branch_factory = None  # Set to an instance of ForeignBranchFactory by scenario
 

=== modified file 'breezy/tests/scenarios.py'
--- old/breezy/tests/scenarios.py	2017-05-23 14:08:03 +0000
+++ new/breezy/tests/scenarios.py	2018-11-18 19:48:57 +0000
@@ -46,7 +46,7 @@
 def multiply_tests_by_their_scenarios(some_tests, into_suite):
     """Multiply the tests in the given suite by their declared scenarios.
 
-    Each test must have a 'scenarios' attribute which is a list of 
+    Each test must have a 'scenarios' attribute which is a list of
     (name, params) pairs.
 
     :param some_tests: TestSuite or Test.

=== modified file 'breezy/tests/script.py'
--- old/breezy/tests/script.py	2018-11-11 04:08:32 +0000
+++ new/breezy/tests/script.py	2018-11-18 19:48:57 +0000
@@ -142,7 +142,7 @@
 
     :param args: The command line arguments
 
-    :return: A tuple containing: 
+    :return: A tuple containing:
         - The file name redirected from or None
         - The file name redirected to or None
         - The mode to open the output file or None

=== modified file 'breezy/tests/ssl_certs/create_ssls.py'
--- old/breezy/tests/ssl_certs/create_ssls.py	2017-09-25 22:43:50 +0000
+++ new/breezy/tests/ssl_certs/create_ssls.py	2018-11-23 02:12:35 +0000
@@ -193,6 +193,7 @@
     ca_key_path = ssl_certs.build_path('ca.key')
     needs('Signing server.crt', server_csr_path, ca_cert_path, ca_key_path)
     server_cert_path = ssl_certs.build_path('server.crt')
+    server_ext_conf = ssl_certs.build_path('server.extensions.cnf')
     rm_f(server_cert_path)
     _openssl(['x509', '-req', '-passin', 'stdin',
               # Will need to be generated again in 10 years -- vila 20071122
@@ -200,6 +201,7 @@
               '-in', server_csr_path,
               '-CA', ca_cert_path, '-CAkey', ca_key_path,
               '-set_serial', '01',
+              '-extfile', server_ext_conf,
               '-out', server_cert_path],
              input='%(ca_pass)s\n' % ssl_params)
 

=== modified file 'breezy/tests/ssl_certs/server.crt'
--- old/breezy/tests/ssl_certs/server.crt	2017-09-25 22:43:50 +0000
+++ new/breezy/tests/ssl_certs/server.crt	2018-11-23 02:12:35 +0000
@@ -1,33 +1,35 @@
 -----BEGIN CERTIFICATE-----
-MIIFpTCCA40CAQEwDQYJKoZIhvcNAQELBQAwgZMxCzAJBgNVBAYTAkJaMREwDwYD
-VQQIDAhJbnRlcm5ldDEPMA0GA1UEBwwGQmF6YWFyMRQwEgYDVQQKDAtEaXN0cmli
-dXRlZDEMMAoGA1UECwwDVkNTMR8wHQYDVQQDDBZNYXN0ZXIgb2YgY2VydGlmaWNh
-dGVzMRswGQYJKoZIhvcNAQkBFgxjZXJ0QG5vLnNwYW0wHhcNMTcwOTI1MjIxMjMw
-WhcNMjcwOTIzMjIxMjMwWjCBnDELMAkGA1UEBhMCTEgxETAPBgNVBAgMCEludGVy
-bmV0MRIwEAYDVQQHDAlMb2NhbEhvc3QxFDASBgNVBAoMC1Rlc3RpbmcgTHRkMRUw
-EwYDVQQLDAxodHRwcyBzZXJ2ZXIxEjAQBgNVBAMMCTEyNy4wLjAuMTElMCMGCSqG
-SIb3DQEJARYWaHR0cHNfc2VydmVyQGxvY2FsaG9zdDCCAiIwDQYJKoZIhvcNAQEB
-BQADggIPADCCAgoCggIBALBJykr9Zizb1hr4/Jb37Cv7bX2ViM8omzVuseNd/2d8
-RbFDOc9AgyBF4/G1lv5vzofxDkrNuwM1BRdwam2Qt3XwKbKF3tuJ7bpKnVMmxzHc
-D1UVAxnyRf3ynnLmtFUjV6Fr6yCQxlq0wzf/DWVI4tEPveU9ecHm9rPsSw6yUW7g
-B5RgY1qFvvxScNKgletb8nN9pkvvP8OofKuwOtwGkKvWXAgOgZU61mZa0JiE7Y5W
-1JWE5HH4duOQw1P64zYg8hO7AtqTzNOpEUba8XuGJ0/2440JSIVMdQC4YUv6zsWr
-+8A1XYKPEm9ID7J9ERJDCfnImz/bDbeCTCq0cmEFOLPDVY16dwQDDUwawzkgFxXf
-bzaf+0Tq6nL+I0N2Cn0Nghs3F/LRK4+OGlLqvXPS8oL1at3cBASeKFmJd7KP23sl
-otiYXNT/J6EV/z1CMvUud4SSJFTz49fLhS2U/kLFP+NZ/SvbPuvfEubf1GLngtzW
-AaSWnkFB85ZURz9qobd5W569kwjA5a0YchCuY53qsDs6UUGO2sLLCHWn4uQ/ahL7
-lkPSBapgtDnQMKdg2XnrK3t+/00h/jaCg9QV/cNRg8JG8F72vyTsQp89vIqX9Q7A
-HQNas8eFeTzXedi3f85yS4W7ytJdEvtQ8oOvppcIAG/i2nEOkX995Sn258ZiyAtj
-AgMBAAEwDQYJKoZIhvcNAQELBQADggIBAHAamJlRaMaloXHDZS5en4LkmDAHZk0/
-zGjXEq34JsjdAMPJTmN7/KJmCFISDi2At+piJV/noTe0NG6MWJXmqbFb91U6jfBd
-YWd/eOBJzoU354g53MNjU/i7HHr4Q7IhRWhbh/Bb2Pwv98OesDOsyvQ04dcUJDrF
-I6GLw+M9LED+wc1IKgEjty4MIKVIvCpHpCTuiqFzVWXx9TgpRi05os0wripR1mUU
-24AoXwP/bTP3RdQ9N3J9S7AtRKghkFp3Emfa+PtRU2h+ZEQmS4QH6XqtqI9g8x7n
-NtezT5LVVJ2i9AMmsPtqylwnaRnH1i3Q+rnQ7kFnIJZlizBXHQwJR8tP/W5ZJ8ng
-GOiuyGhUbMRCPb8YH7P4y7z8tfVfY0w1/qimNT2fkoKjP7X/BL+5TiM8I9srgSFJ
-nFC72yHYKjSe9Tn+M5tt0/2b4gAEViekPDBd8ApJUeGPCQcP7xpNfZePIJUlqZqW
-fXMVmwqvpnaRILAhLUn1clb9AeVISoJlolX//b8mWBvvXJyePLgLu6WymTx3GBgt
-u9UCW2lAwePR/TvPl0tDqOPthGPJVFQvvG4ZNA1pFMuFoUBJB5inSEf88v4O1a/d
-ZKb0OvIBTyfapA99Vu8BGJaES4v3LSW6osw3uV1MK9gY/nYbZnIVEiq87UMLPfaA
-xWspwPL931fb
+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
+ufr0c9DfBSK1dvUOQCPgJ1a2FwSh
 -----END CERTIFICATE-----

=== modified file 'breezy/tests/ssl_certs/server.csr'
--- old/breezy/tests/ssl_certs/server.csr	2017-09-25 22:43:50 +0000
+++ new/breezy/tests/ssl_certs/server.csr	2018-11-23 02:12:35 +0000
@@ -3,27 +3,27 @@
 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
-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
+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
-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
+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
 -----END CERTIFICATE REQUEST-----

=== added file 'breezy/tests/ssl_certs/server.extensions.cnf'
--- old/breezy/tests/ssl_certs/server.extensions.cnf	1970-01-01 00:00:00 +0000
+++ new/breezy/tests/ssl_certs/server.extensions.cnf	2018-11-23 02:12:35 +0000
@@ -0,0 +1,9 @@
+basicConstraints=CA:FALSE
+subjectAltName=@my_subject_alt_names
+subjectKeyIdentifier = hash
+
+[ my_subject_alt_names ]
+IP.1 = 127.0.0.1
+IP.2 = ::1
+DNS.1 = 127.0.0.1   # to keep python 2.7 happy
+DNS.2 = localhost

=== modified file 'breezy/tests/ssl_certs/server_with_pass.key'
--- old/breezy/tests/ssl_certs/server_with_pass.key	2017-09-25 22:43:50 +0000
+++ new/breezy/tests/ssl_certs/server_with_pass.key	2018-11-23 02:12:35 +0000
@@ -1,54 +1,54 @@
 -----BEGIN RSA PRIVATE KEY-----
 Proc-Type: 4,ENCRYPTED
-DEK-Info: DES-EDE3-CBC,FF3C1F8F52BBDD60
+DEK-Info: DES-EDE3-CBC,CFF022EC9EF309CB
 
-ENNA2/bOpi7XIMfYx5CcXDoqV6pMEI3OcCmvxFjLhWNg9c64Me0LCLd5+FbFXiVx
-71breJAnt66sP+4ssIYRTeSxx4BSNsw8BpOQ+Ypp+ZDWOcdbb3HrX83QdILf1tqT
-/GGTqKb16yCOixFtY8H0uSaDPeXJsXM8i5Gka483FALfJjXe6/UYPH6H4iffjUci
-UkNUCcIiY0TbqlBjMO+au6/rcmweTVoCJZVfVB8lBzB3E7DJ1L3BT0prwYVI4NcL
-bmuPrPWsaURfg/2dVLb4k/Dykk9u2OniJ0niEU9gxxcmu3KzL8Qd5PY5zEt/Rb5n
-LGMu2bQLhwqCJK3/BzpU50N/2gMpyx9KZcD/lWi1SEq/hkTs7uhkjLWMwHq1ze9S
-yUtjzZk3WQBT1Q/wHLPKeNLW487cMKWx6IzKc4ru/YmMjca51tfqzGng7r0ebicO
-vyJPmiuKdBwxAoEnwHuaBN0z8Vusfwou2jvCMYsKa4OHnejp27WQBSBUMWoflIS3
-6/1u/mdqoyK0bcgvR9fCc5cEjcVKoa4vnr40/amfmThj2jEBNWD7soWRllb8OXSc
-0u9J4z94H+NIaFAXbeM2G3mQI5g9n6Kr4/8f+QhzSw74sYwb+nlRKk3dy0qQVGEe
-VrAk/1nGnsabhtVolWJvXd9X0azbJMFb/galmI8zqgw131XkOWVN6G2uVO06biMp
-3KccWU6QK6udlQMueCEcAcW5Jyouhw8LctewmRsO9ACJw2MqUGX1TfwCDTA9NxKy
-EQYtUqT8aPnpDcmoZiqxbFY/lIw3I82oqqK/Mp/FWpQnJW7SKXsO24a3am0JHTsJ
-ZXXM1O1p4F6so1IHZ4+SPbhrWITqZxKnP2BkUMil378GWG5zeYtUlsv0U15IZeK4
-JVLW/69GvdV2x+DYm2oxnIwocRK+9yI0Rc28JXSuBNOqgCAMRm7oVt2yUTFcaU5/
-tbMtbMxS1xKFUzvnW6vXqdOjVhd8jUdA8PGWc5KOXIwXG59NxzJv5ltBknJL9FM8
-e9UJlcXdlpU967A2LToWmfRf/Xo81XH0Qr3QCYItrL/JHJlx86Q+ZWkw1Qmf/ijW
-e9lZDU3ZuYkXi6dBLq55OennawqAOzut5J4QttfOkb0INZcv8OqROBoHIb643q3x
-SjLiwVmhs73wUd5R++n4ixWN19kNT0DqfVDK8mySDUxOfrQJCxHtFUqysWhoYc5s
-zKiYnvKUTO9hsVk07+0Jc1GUxiPvZe1s80yt0gTI4SGCMs0n69akpm/hWoCdVCV7
-90NlPZz04oc2i1hzn4Nu9LgSEjAQ/8+h5lK8nLENpK1l2YHUF+L1bL3iRaVzzWTW
-Bmd5LMdqbDXTVy145O0xNtUteMW+e+vbeCdp9M1642EbZRlijhwgdTcHpqai9tbi
-QwIhyrOfjaVmKHDEmjQD6tzd7/9vW3rWxIXV0ZaQtYvYfFJmUHcnQJpFz6bRpkxp
-ni8LJHoSAUrDzbuKoK/ru/Lnp7J7206ehWln90PNCfmDgLcJuKFDad/SIx24emcF
-J8n9FiTy3P7TT21aDch4sRSFlb2odYThdMjLRZfQFOCGVIpStBoVsnzCcPsqnGpy
-JwpTGr5O0onFdUSs5q3fE3bqAMLSstpc9wj9Cv1K9DDEmnby8SethjahUlkuhRFM
-ijChZ2Z3ty5Z9Z0cR7GAVZ96ey5FqHCThFn1/HiMpZ0u/vQrvwQ8ApjDTa0xenV6
-ZxHdl/sEQgBEFlC26VRepk6P7s4MR22/RT8FDHxGJyrdPz+oapZGAu8DIv19gBIT
-p7CC1H0FV9jMf7lCNuFT/IVz/dq65EOumdRogOIht85AQmIeZJBDxBOas/jZ6PcF
-acapxVUX/odqkYKi86IlITD/v5j7DYgmWYAwn74FR0F6tyC8nb4tOP350xyN3akD
-Gvi4JMIFxfsP4+A9sAPJPJuS8MOY57Xa6VXOyFZMX6XuqO4byVVTdEp42Ozm76oT
-4v+4fd7l2DqiscsViFIClybPM5pgsgHssIBr827H8wYf1RKTXCwWp7pp6xcABi9o
-A27W63gkPE0XJvsn5uHN20QjP5EX8cShqnjB8R4fMSWw7/hVM5Ma4K0chS1Q3YIb
-jHZo0Y1qvK+4W1HFw/lxBv3Dn7p5klTqnKiFCxaQvGIhxGgN6Ir1qGi0c3oNzIiY
-R766fTXIAs8ONDYTc89PBloknwl8c6ZktTSs7ILhPxDQJv0GGnt7Aufb6IcfrRs9
-DRBsfRlmmuAlUd1CSpij9ZimX6FZL2yqXUT2mX4HIvE4LuIpd3FwAr5UBxW0Jp1j
-3+jq2evxnaBggOb8+UA7M1z4o39jJw1xaBGcH4jJIp/7XV8Dbx1KGdAWTqftHURV
-ebZ/H/3rBCkZqXF4+FLHxhFrxMr36hwWacEgSLTo18oD8eC73F4sg74W6OS15U/d
-tuxi18HisbCPmI7HlFYJxhxxVGenpndZmxOu3yg4nbMIdHUPJcmzmcDEnkGEz+ag
-43mfmBsCOliTEh7+KMLB2S4dslVEfF+PZwE9tg1Mlo9mzqCdzv2y/dw3OGpxNi7Y
-vJQmxRoZMBfoXHUuYP2Ise54Ol2RkVDbF0weZ6ANkbhI8solGQIhmG31+spaChUA
-s1r9yw4e/j7D/VbwbYwYmOJuMQDZ1W1F6uGPWk1F2pawWSe5mSnBiwR4j7tM86l4
-C4R32ZzhN1pJPZsw+DCf70+45VxKb3Qori8NKz5D3zq8LbMK1YFvCXn+F6RPQn4w
-5YOZhfNSYTkw75Yirr9Ydvkgm7YLHW8MP/km9HHMU8tCIwRD9/SszVgUT6ucDw6z
-1bKq6M81ymJLNMhEIkGtBPKfJmz0gniKe2txcBtIfYGnIfftvklHe65/PEa8tHQN
-7GCgSZeeUqYQV1Ng/IyldD/7CPq3ioywPUvzoV9GKS23wvudV50TkG6BaL3xdqY/
-toC7qLP4Kuc3baDhGeh7UgvHtavsSNpyHLUt5On0TTmBw2faO0gHD32QCjNFKY1C
-xGSg1Mx7K8uvRQ2seRh/4orB0k6TFssp2p2LnRitgitdLv6vrWX41bHUWGuSc8ti
-MapR4GTEaN5Emly4UwY9dvZQk39N3m9dWyKvBkmSaZq2sKA9YMjp5sT95i0jOA1I
+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
 -----END RSA PRIVATE KEY-----

=== modified file 'breezy/tests/ssl_certs/server_without_pass.key'
--- old/breezy/tests/ssl_certs/server_without_pass.key	2017-09-25 22:43:50 +0000
+++ new/breezy/tests/ssl_certs/server_without_pass.key	2018-11-23 02:12:35 +0000
@@ -1,51 +1,51 @@
 -----BEGIN RSA PRIVATE KEY-----
-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
+MIIJKQIBAAKCAgEA11Bosf93/MNRF0YOrIRClsk098PtmB9HQCc6R9NV1eZROD0g
+Q0bCk0xf6ucpd7TG3chEIjhJQZIj4EkCH5/SW6oePhk6YgN4PG1Rhu8szcZdNbb2
+WxKrwkt1Egl/d0iSclVupz7LE5VLHwX+JYH3wq4CU30hbMPkOcC+soDQMU6J8cEp
+0ddvAiBfUvprq2gOhll3RAn2GZ4BG/XfGfJ/iCfkDa2yd4PNha2SPn4UYXBDqMoU
+2nU6QT4FrB77CobukrzRJ42u/tqdQyVBKebIPyPmtpPTLUkfc4FWq17ocrmsJxUV
+MSu38FzXcz7DTOsh+95gdvcOyNeuqanBspnKmkRiDYSWQaJWZpL2+jI26inAx1z2
+XVkWd9bMXwdr7Et5jrsqpfXrp0Ke1XyKAA/V5x2hnLwfDIGP92tWwAcmhYxXG3/H
+plCcMmNu/mSl1EL4W5l6w0oqFlcjf8tMcdnISpCrhH+EuFBvQj6TIBVDAyJNoN3c
+wApJenVXbkTJzWAJkJRavcdvew5MZjHPj1tCb3XlMY/kfSIwiqH8H1qWyzhks0xa
+HZrgk16mHfVR/Mjg/4mxrKd8dRMbhXqya/oOJoK15623l7Gg9YyxmSBBtG59TkUV
+rIPiOu0XQd0cZOM0q40lXAvBNzuBrwdYu+EFpCZocx4yMIDJiXkt4hNRIr8CAwEA
+AQKCAgAjn5ci1AyrEjmpaxrkaiGGRxXvZEg8Ifis4ZCf75RFBo0ri9l5qAxrSHia
+KdLPjmZUrVyweLWOFrq+0fV6+/tW1SeZyJzDOKW9Aa06cPnttcMYLwRFfypRxCBD
+crTXLHemWQIsw5Pf0pSSNnCdDgrK9/VEkPBlyWdKMtyaNfu8HK1wBTCBGm6wYGDF
+Hs+PlXDJw6Wa6TcBeAXg9WYLKfb1tPvjU3iyk2j+lAAdPMjsciGPnJekqT6RKszP
+dHS+giKYvoqwS53HZq4cPN6yKw+4ep0iWgTXekCs4JpRUiuNR7D26mMONpiBOSsg
+UyMG5+RAgsNdC3Uzv5OTWJXGkfFWFNDQUcZGIyqjI8DMfAquLWWd87wx/JoR8ABv
+zJ5NBVTF8kkHbkfXykoSKIIvxh7og9KP01hkf7h9qXNW9ConrEwCNZhdmlM4WiRB
+h39CBf1gyLwrbYFbuVW/FOZq6s10L5ril0SahyHxsUc2xZPzH4SrgasCiWZb/8l/
+MGMu803CFUfXaCH1rs+cY7kEp8w9p8f9NxtHX69BCeds7OZwGootnS8Nq7rE8lbO
+eyHTLX+1is9iivoNmC+LyF1lM2khbCXdqeH7V7gTjMYRFP4XrZro6atZ0iYa9NyP
+/SARK5T8Qoa5zYLEhe/lBhyclaC996ktHsuIyiY+3M2bsllZsQKCAQEA/PLRsT/H
+o+6p6h3x/cEuExVH2Ppbo+gQ/IR1rA9X/1a0k1f31VRrEtCTghh7BtDgFpIGRNfd
+rhXVBdWJsow9gSzGyC0S8AQAvoge1Bw0wJOt8OIX0efLs8BsgSUQ8XxFKN0TOLz+
+la73Itq+uhUUJfsPk0gxV73/Snrf3rh97HULZcEyzzJG6XoNUcbEiJ9nRpec8Exz
+eX+bEBWzEdDa5LKIEueMfENHDPu9jWCC3mlTYq//I+KaxlcN1jp+HS2kKtZksNCw
+scxHqm6LD6wuPXyE5xhxTRZsYPfBzpSSfyuVH1l14R0DKKIPDfBoOodGmXGG9A9Z
+Ufz5w1NFzRpllwKCAQEA2eldDdosbO10f8Syz/keFzG2BaU5VkTXhDb26FUyrhL0
+zz1tJWaS5u0Cttc5Pac2CnV40HhprrGDgSzea25AzvHMHu4OD4XhYt/wl9B8s+q9
+VS8zkFKBibxbfxk9mw+UntzQ8HtsfBp8kLtsva+IxKfeao8raLI3GOICufe7qrc3
+pZguTV30Zy59uNUmIDiElXJvdaC2+of6wdcmyxEKiMOQyOhuEHY7UUUeaxmI2mph
+FbnZRyVlbRwDS8M7EjQXaIjkYkRMCEXtul7e3ho37rFyHZlr6Lh3zlwQCT2cDK0J
+gJcTj/wB0M3A1rvFRziDjYERa9+oOwcvGSs5zJlhGQKCAQEAkuqyMsI5wZSQqkOE
+V3/JtBnLJlKbwYK7wv9onWw4Dz2cGmygrQ6gNkhhNNHlOxs83L8p1viOcFuL5ByY
+ItVjr9CDEKdldXTNvdywE0DivuvHvr6DWU7JuPjNzODri2dDgC2PyYe0UtpR/rOQ
+zeIKVtkQvdnTlwPq8KaXuvPrZ9i/qvVg/olUOK3EaLgLVNNJF+5doBC3jV05gkko
+PfPR/71WXayRo2csMHVTLndc67O/U/WnOn+WqBbOGZzVvTrSPHNT/oLn7g0Znvsf
+2BWIsfvN8a/3tu+MOXIN5l/TCvwUXCYI2pyQRhyCo/T7hOsnbV5MJRt5JK7LntCS
+HUP0twKCAQAICVw+M4qp5cQDJkz18JkUf+fXo3VO4jEUljZa8TFyTA6tSfWpiHPo
+gls0RRG+XVlX32c6QQacw7022WHGkoVfXHmLtnncRrK+Q8YKw0ymEgUzjA8ZxoEy
+hDjXoiWsf1Ga3kfyZorktNFdQRxMjpm7rvk78tXGAbSYfVVeaG2KaUFrIQasIcfu
+uj82vt2uGIeDP3ou22OEL9mmpnmuyY0a6COB1Vih0Mp1P9hUWNe8PmogM/94aT+p
+W3wfoi6eiD9IwquxmBU5xOJ0miUcCdmAOxkbUFozdgItISYSQSxtJ0CPdoLpL4Ed
+o0j2YmxvKP1pDZaH5PK+YpBxHDAAhLOZAoIBAQDvPvBztK+6GnUwU3Rb2oRKmw/X
+eAg6qnmUF5fMaCCW45ywL+NLc8r8XL3eu2uVsMsnEoqQZmIV9CUzFB7pbij1F2TK
+rU5NXgoLKrjdPsJMdGttUd+E4+Z2X7OAJabuMcHYPOBUCxUjE3hq3K8jTiGngKYP
+NIf1EtAqBC/uToU0fYeJ6S7CQeOAeyQjmkQ/y5+DVKZlmDRMjv8fQipb4gVRnkW9
+aXR2EJ0VEcbEoiu7M1lr8R6t89jdArK0PlfLYXGWzryo+s230nQpVOzZ7ZWqw4um
+aaYHfgIZrJTVDzYIwRSBf8a7XXwwtyIMsUKrAx/oAlaydOTDTd64ueIGsXW5
 -----END RSA PRIVATE KEY-----

=== modified file 'breezy/tests/test_cache_utf8.py'
--- old/breezy/tests/test_cache_utf8.py	2018-08-21 07:56:36 +0000
+++ new/breezy/tests/test_cache_utf8.py	2018-11-23 03:06:01 +0000
@@ -73,9 +73,12 @@
         self.check_decode(u'some_\xb5_unicode_\xe5_chars')
 
     def test_cached_unicode(self):
-        x = u'\xb5yy' + u'\xe5zz'
-        y = u'\xb5yy' + u'\xe5zz'
-        self.assertFalse(x is y)
+        # Note that this is intentionally split, to prevent Python from
+        # assigning x and y to the same object
+        z = u'\xe5zz'
+        x = u'\xb5yy' + z
+        y = u'\xb5yy' + z
+        self.assertIsNot(x, y)
         xp = cache_utf8.get_cached_unicode(x)
         yp = cache_utf8.get_cached_unicode(y)
 

=== modified file 'breezy/tests/test_gpg.py'
--- old/breezy/tests/test_gpg.py	2018-11-11 04:08:32 +0000
+++ new/breezy/tests/test_gpg.py	2018-11-18 19:48:57 +0000
@@ -342,13 +342,13 @@
         self.import_keys()
         content = b"""-----BEGIN PGP SIGNED MESSAGE-----
 Hash: SHA1
- 
+
 bazaar-ng testament short form 1
 revision-id: test@example.com-20110801100657-f1dr1nompeex723z
 sha1: 59ab434be4c2d5d646dee84f514aa09e1b72feeb
 -----BEGIN PGP SIGNATURE-----
 Version: GnuPG v1.4.10 (GNU/Linux)
- 
+
 iJwEAQECAAYFAk42esUACgkQHOJve0+NFRPc5wP7BoZkzBU8JaHMLv/LmqLr0sUz
 zuE51ofZZ19L7KVtQWsOi4jFy0fi4A5TFwO8u9SOfoREGvkw292Uty9subSouK5/
 mFmDOYPQ+O83zWgYZsBmMJWYDZ+X9I6XXZSbPtV/7XyTjaxtl5uRnDVJjg+AzKvD

=== modified file 'breezy/tests/test_help.py'
--- old/breezy/tests/test_help.py	2018-11-11 04:08:32 +0000
+++ new/breezy/tests/test_help.py	2018-11-18 19:48:57 +0000
@@ -204,12 +204,12 @@
         """Concise help text excludes the descriptive sections."""
         class cmd_Demo(commands.Command):
             __doc__ = """A sample command.
- 
+
             Blah blah blah.
 
             :Examples:
                 Example 1::
- 
+
                     cmd arg1
             """
         cmd = cmd_Demo()
@@ -429,7 +429,7 @@
         # The help formatter expect the class name to start with 'cmd_'
         class cmd_Demo(commands.Command):
             __doc__ = """A sample command.
- 
+
             Blah blah blah.
 
             :Formats:
@@ -437,7 +437,7 @@
 
             :Examples:
               Example 1::
- 
+
                 cmd arg1
 
             :Tips:
@@ -455,18 +455,18 @@
 }}
 Description:
   zz{{zz{{Blah blah blah.}}
- 
+
 }}:Formats:
   zz{{Interesting stuff about formats.}}
- 
+
 Examples:
   zz{{Example 1::}}
- 
+
     zz{{cmd arg1}}
- 
+
 Tips:
   zz{{Clever things to keep in mind.}}
- 
+
 ''',
                            cmd_Demo())
 

=== modified file 'breezy/tests/test_https_urllib.py'
--- old/breezy/tests/test_https_urllib.py	2018-07-27 02:04:31 +0000
+++ new/breezy/tests/test_https_urllib.py	2018-11-23 01:35:56 +0000
@@ -102,7 +102,12 @@
 
         # Python Issue #17980: avoid denials of service by refusing more than
         # one wildcard per fragment.
-        ok({'subject': ((('commonName', 'a*b.com'),),)}, 'axxb.com')
+        if sys.version_info[:2] >= (3, 7):
+            # Python 3.7 dropped support for partial wildcards, see
+            # https://docs.python.org/3/whatsnew/3.7.html#ssl
+            not_ok({'subject': ((('commonName', 'a*b.com'),),)}, 'axxb.com')
+        else:
+            ok({'subject': ((('commonName', 'a*b.com'),),)}, 'axxb.com')
         not_ok({'subject': ((('commonName', 'a*b.co*'),),)}, 'axxb.com')
         not_ok({'subject': ((('commonName', 'a*b*.com'),),)}, 'axxbxxc.com')
 

=== modified file 'breezy/tests/test_script.py'
--- old/breezy/tests/test_script.py	2018-11-11 04:08:32 +0000
+++ new/breezy/tests/test_script.py	2018-11-20 21:24:08 +0000
@@ -44,8 +44,8 @@
     def test_trim_blank_lines(self):
         """Blank lines are respected, but trimmed at the start and end.
 
-        Python triple-quoted syntax is going to give stubby/empty blank lines 
-        right at the start and the end.  These are cut off so that callers don't 
+        Python triple-quoted syntax is going to give stubby/empty blank lines
+        right at the start and the end.  These are cut off so that callers don't
         need special syntax to avoid them.
 
         However we do want to be able to match commands that emit blank lines.
@@ -186,7 +186,7 @@
             """)
 
     def test_null_output_matches_option(self):
-        """If you want null output to be a wild card, you can pass 
+        """If you want null output to be a wild card, you can pass
         null_output_matches_anything to run_script"""
         self.run_script(
             """
@@ -628,12 +628,11 @@
 
     def test_dont_shelve(self):
         # We intentionally provide no input here to test EOF
-        self.run_script("""
-            $ brz shelve -m 'shelve bar'
-            2>Shelve? ([y]es, [N]o, [f]inish, [q]uit): 
-            2>No changes to shelve.
-            """,
-                        null_output_matches_anything=True)
+        self.run_script((
+            "$ brz shelve -m 'shelve bar'\n"
+            "2>Shelve? ([y]es, [N]o, [f]inish, [q]uit): \n"
+            "2>No changes to shelve.\n"
+            ), null_output_matches_anything=True)
         self.run_script("""
             $ brz st
             modified:

=== modified file 'breezy/tests/test_urlutils.py'
--- old/breezy/tests/test_urlutils.py	2018-11-12 01:41:38 +0000
+++ new/breezy/tests/test_urlutils.py	2018-11-23 03:06:01 +0000
@@ -1100,7 +1100,12 @@
         self.assertEqual('abc/def', urlutils.quote('abc/def', safe='/'))
 
     def test_quote_tildes(self):
-        self.assertEqual('%7Efoo', urlutils.quote('~foo'))
+        # Whether ~ is quoted by default depends on the python version
+        if sys.version_info[:2] >= (3, 7):
+            # https://docs.python.org/3/whatsnew/3.7.html#urllib-parse
+            self.assertEqual('~foo', urlutils.quote('~foo'))
+        else:
+            self.assertEqual('%7Efoo', urlutils.quote('~foo'))
         self.assertEqual('~foo', urlutils.quote('~foo', safe='/~'))
 
     def test_unquote(self):

=== modified file 'breezy/transform.py'
--- old/breezy/transform.py	2018-11-16 23:21:31 +0000
+++ new/breezy/transform.py	2018-11-18 19:48:57 +0000
@@ -604,7 +604,7 @@
 
         :param name: The basename of the file.
 
-        :param target_id: The directory trans_id where the backup should 
+        :param target_id: The directory trans_id where the backup should
             be placed.
         """
         known_children = self.by_parent().get(target_id, [])

=== modified file 'breezy/transport/__init__.py'
--- old/breezy/transport/__init__.py	2018-11-17 16:53:10 +0000
+++ new/breezy/transport/__init__.py	2018-11-18 19:48:57 +0000
@@ -265,7 +265,7 @@
     def fdatasync(self):
         """Force data out to physical disk if possible.
 
-        :raises TransportNotPossible: If this transport has no way to 
+        :raises TransportNotPossible: If this transport has no way to
             flush to disk.
         """
         raise errors.TransportNotPossible(

=== modified file 'breezy/transport/http/_urllib2_wrappers.py'
--- old/breezy/transport/http/_urllib2_wrappers.py	2018-11-16 12:25:18 +0000
+++ new/breezy/transport/http/_urllib2_wrappers.py	2018-11-22 03:26:33 +0000
@@ -486,9 +486,15 @@
                     "'brz help ssl.ca_certs' for more information on setting "
                     "trusted CAs.")
         try:
-            ssl_sock = ssl.SSLSocket(self.sock, self.key_file, self.cert_file,
-                                     cert_reqs=cert_reqs, ca_certs=ca_certs,
-                                     server_hostname=self.host)
+            ssl_context = ssl.create_default_context(
+                purpose=ssl.Purpose.SERVER_AUTH, cafile=ca_certs)
+            ssl.check_hostname = True
+            if self.cert_file:
+                ssl_context.load_cert_chain(
+                    keyfile=self.key_file, certfile=self.cert_file)
+            ssl_context.verify_mode = cert_reqs
+            ssl_sock = ssl_context.wrap_socket(
+                self.sock, server_hostname=self.host)
         except ssl.SSLError:
             trace.note(
                 "\n"
@@ -500,10 +506,6 @@
         # Wrap the ssl socket before anybody use it
         self._wrap_socket_for_reporting(ssl_sock)
 
-        if cert_reqs == ssl.CERT_REQUIRED:
-            peer_cert = ssl_sock.getpeercert()
-            ssl.match_hostname(peer_cert, host)
-
 
 class Request(urllib_request.Request):
     """A custom Request object.

=== modified file 'breezy/transport/log.py'
--- old/breezy/transport/log.py	2018-11-11 04:08:32 +0000
+++ new/breezy/transport/log.py	2018-11-18 19:48:57 +0000
@@ -36,7 +36,7 @@
 
     Not all operations are logged yet.
 
-    See also TransportTraceDecorator, that records a machine-readable log in 
+    See also TransportTraceDecorator, that records a machine-readable log in
     memory for eg testing.
     """
 

=== modified file 'breezy/transport/trace.py'
--- old/breezy/transport/trace.py	2018-11-11 04:08:32 +0000
+++ new/breezy/transport/trace.py	2018-11-18 19:48:57 +0000
@@ -36,7 +36,7 @@
     operation please add a test to the tests of this transport, for the logging
     of the operation you want logged.
 
-    See also TransportLogDecorator, that records a machine-readable log in 
+    See also TransportLogDecorator, that records a machine-readable log in
     memory for eg testing.
     """
 

=== modified file 'breezy/tree.py'
--- old/breezy/tree.py	2018-11-16 18:40:46 +0000
+++ new/breezy/tree.py	2018-11-22 22:15:05 +0000
@@ -19,9 +19,13 @@
 
 from __future__ import absolute_import
 
+try:
+    from collections.abc import deque
+except ImportError:  # python < 3.7
+    from collections import deque
+
 from .lazy_import import lazy_import
 lazy_import(globals(), """
-import collections
 
 from breezy import (
     conflicts as _mod_conflicts,
@@ -290,7 +294,7 @@
         :param path: A relative path within the tree.
         :return: A tuple containing kind, size, exec, sha1-or-link.
             Kind is always present (see tree.kind()).
-            size is present if kind is file and the size of the 
+            size is present if kind is file and the size of the
                 canonical form can be cheaply determined, None otherwise.
             exec is None unless kind is file and the platform supports the 'x'
                 bit.
@@ -840,9 +844,9 @@
                                       self.target.extras()
                                       if specific_files is None or
                                       osutils.is_inside_any(specific_files, p)])
-            all_unversioned = collections.deque(all_unversioned)
+            all_unversioned = deque(all_unversioned)
         else:
-            all_unversioned = collections.deque()
+            all_unversioned = deque()
         to_paths = {}
         from_entries_by_dir = list(self.source.iter_entries_by_dir(
             specific_files=source_specific_files))

=== modified file 'doc/en/conf.py'
--- old/doc/en/conf.py	2018-11-18 02:43:52 +0000
+++ new/doc/en/conf.py	2018-11-18 19:48:57 +0000
@@ -103,4 +103,3 @@
     # Miscellaneous
     'user-reference/readme',
 ]
-

=== modified file 'profile_imports.py'
--- old/profile_imports.py	2018-11-16 18:35:30 +0000
+++ new/profile_imports.py	2018-11-18 19:48:57 +0000
@@ -202,4 +202,3 @@
     """Remove the import and regex compile timing hooks."""
     __builtins__['__import__'] = _real_import
     re._compile = _real_compile
-

=== modified file 'setup.cfg'
--- old/setup.cfg	2018-11-18 20:59:41 +0000
+++ new/setup.cfg	2018-11-20 23:50:57 +0000
@@ -31,10 +31,6 @@
    F812
    F821
    F841
-   W191
-   W291
-   W293
-   W391
    W503
    W504
    W605

=== modified file 'tools/brz_epydoc_uid.py'
--- old/tools/brz_epydoc_uid.py	2017-05-21 18:10:28 +0000
+++ new/tools/brz_epydoc_uid.py	2018-11-18 19:48:57 +0000
@@ -40,4 +40,3 @@
 
 
 _ScopeReplacer._should_proxy = True
-

=== modified file 'tools/check-newsbugs.py'
--- old/tools/check-newsbugs.py	2018-11-16 12:54:47 +0000
+++ new/tools/check-newsbugs.py	2018-11-18 19:48:57 +0000
@@ -1,5 +1,5 @@
 #!/usr/bin/python
-# Simple script that will check which bugs mentioned in NEWS 
+# Simple script that will check which bugs mentioned in NEWS
 # are not yet marked Fix Released in Launchpad
 
 import getopt, re, sys

=== modified file 'tools/generate_docs.py'
--- old/tools/generate_docs.py	2018-11-16 13:15:40 +0000
+++ new/tools/generate_docs.py	2018-11-18 19:48:57 +0000
@@ -25,7 +25,7 @@
     bash_completion  bash completion script
     ...
 
-Examples: 
+Examples:
 
     python generated-docs.py man
     python generated-docs.py bash_completion
@@ -99,7 +99,7 @@
 def print_extended_help(option, opt, value, parser):
     """ Program help examples
 
-    Prints out the examples stored in the docstring. 
+    Prints out the examples stored in the docstring.
 
     """
     sys.stdout.write(__doc__ % {"prog": sys.argv[0]})

=== modified file 'tools/generate_release_notes.py'
--- old/tools/generate_release_notes.py	2018-11-18 02:43:52 +0000
+++ new/tools/generate_release_notes.py	2018-11-18 19:48:57 +0000
@@ -58,7 +58,7 @@
 
 def natural_sort_key(file_name):
     """Split 'aaa-N.MMbbb' into ('aaa-', N, '.' MM, 'bbb')
-    
+
     e.g. 1.10b1 will sort as greater than 1.2::
 
         >>> natural_sort_key('brz-1.10b1.txt') > natural_sort_key('brz-1.2.txt')

=== modified file 'tools/riodemo.py'
--- old/tools/riodemo.py	2018-06-29 15:36:29 +0000
+++ new/tools/riodemo.py	2018-11-18 19:48:57 +0000
@@ -2,12 +2,12 @@
 
 
 # \subsection{Example usage}
-# 
-# \textbf{XXX:} Move these to object serialization code. 
+#
+# \textbf{XXX:} Move these to object serialization code.
 
 def write_revision(writer, revision):
     s = Stanza(revision=revision.revision_id,
-               committer=revision.committer, 
+               committer=revision.committer,
                timezone=long(revision.timezone),
                timestamp=long(revision.timestamp),
                inventory_sha1=revision.inventory_sha1,

=== modified file 'tools/rst2html.py'
--- old/tools/rst2html.py	2008-07-17 01:08:21 +0000
+++ new/tools/rst2html.py	2018-11-18 19:48:57 +0000
@@ -25,7 +25,7 @@
     # python-docutils 0.4-4 -- so monkeypatch in a better pattern
     #
     # This is a bit gross to patch because all this is built up at load time.
-    Body.pats['optname'] = r'[a-zA-Z0-9][a-zA-Z0-9._-]*'    
+    Body.pats['optname'] = r'[a-zA-Z0-9][a-zA-Z0-9._-]*'
     Body.pats['longopt'] = r'(--|/)%(optname)s([ =]%(optarg)s)?' % Body.pats
     Body.pats['option'] = r'(%(shortopt)s|%(longopt)s)' % Body.pats
     Body.patterns['option_marker'] = r'%(option)s(, %(option)s)*(  +| ?$)' % Body.pats

=== modified file 'tools/win32/brz_postinstall.py'
--- old/tools/win32/brz_postinstall.py	2018-11-18 12:18:44 +0000
+++ new/tools/win32/brz_postinstall.py	2018-11-18 19:48:57 +0000
@@ -283,7 +283,7 @@
                             f.write(i)
             else:
                 print('*** Remove line <%s> from autoexec.bat' % pattern)
-                    
+
         elif add_path and not found:
             backup_autoexec_bat(abat, abak, dry_run)
             if not dry_run:

