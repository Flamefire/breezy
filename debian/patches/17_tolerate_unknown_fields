Origin: commit, revision id: jelmer@jelmer.uk-20190211194051-p6mcy0l590qm022m
Author: Jelmer VernooÄ³ <jelmer@jelmer.uk>
Last-Update: 2019-02-11
Applied-Upstream: no
X-Bzr-Revision-Id: jelmer@jelmer.uk-20190211194051-p6mcy0l590qm022m

=== modified file 'breezy/git/mapping.py'
--- old/breezy/git/mapping.py	2019-01-13 18:59:26 +0000
+++ new/breezy/git/mapping.py	2019-02-11 19:40:51 +0000
@@ -37,6 +37,7 @@
     )
 from ..revision import (
     NULL_REVISION,
+    Revision,
     )
 from ..sixish import (
     PY3,
@@ -377,6 +378,17 @@
         """
         return deserialize_fileid_map(blob.data)
 
+    def get_revision_id(self, commit):
+        if commit.encoding:
+            encoding = commit.encoding.decode('ascii')
+        else:
+            encoding = 'utf-8'
+        message, metadata = self._decode_commit_message(
+            None, commit.message, encoding)
+        if metadata.revision_id:
+            return metadata.revision_id
+        return self.revision_id_foreign_to_bzr(commit.id)
+
     def import_commit(self, commit, lookup_parent_revid):
         """Convert a git commit to a bzr revision.
 
@@ -499,6 +511,8 @@
     BZR_DUMMY_FILE = '.bzrdummy'
 
     def _decode_commit_message(self, rev, message, encoding):
+        if rev is None:
+            rev = Revision()
         message = self._extract_hg_metadata(rev, message)
         message = self._extract_git_svn_metadata(rev, message)
         message, metadata = self._extract_bzr_metadata(rev, message)

=== modified file 'breezy/git/repository.py'
--- old/breezy/git/repository.py	2018-11-30 12:39:04 +0000
+++ new/breezy/git/repository.py	2019-02-11 19:40:51 +0000
@@ -348,9 +348,9 @@
             o = self._git.object_store[sha]
             if not isinstance(o, Commit):
                 continue
-            rev, roundtrip_revid, verifiers = mapping.import_commit(
-                o, mapping.revision_id_foreign_to_bzr)
-            yield o.id, rev.revision_id, roundtrip_revid
+            revid = mapping.revision_id_foreign_to_bzr(o)
+            roundtrip_revid = mapping.get_revision_id(o)
+            yield o.id, revid, (roundtrip_revid if revid != roundtrip_revid else None)
 
     def all_revision_ids(self):
         ret = set()
@@ -454,13 +454,9 @@
         commit = self._git.object_store.peel_sha(foreign_revid)
         if not isinstance(commit, Commit):
             raise NotCommitError(commit.id)
-        rev, roundtrip_revid, verifiers = mapping.import_commit(
-            commit, mapping.revision_id_foreign_to_bzr)
+        revid = mapping.get_revision_id(commit)
         # FIXME: check testament before doing this?
-        if roundtrip_revid:
-            return roundtrip_revid
-        else:
-            return rev.revision_id
+        return revid
 
     def has_signature_for_revision_id(self, revision_id):
         """Check whether a GPG signature is present for this revision.

=== modified file 'breezy/git/tests/test_mapping.py'
--- old/breezy/git/tests/test_mapping.py	2019-01-13 14:16:35 +0000
+++ new/breezy/git/tests/test_mapping.py	2019-02-11 19:40:51 +0000
@@ -235,6 +235,9 @@
         self.assertRaises(
             UnknownMercurialCommitExtra,
             mapping.import_commit, c, mapping.revision_id_foreign_to_bzr)
+        self.assertEqual(
+            mapping.revision_id_foreign_to_bzr(c.id),
+            mapping.get_revision_id(c))
 
 
 class RoundtripRevisionsFromBazaar(tests.TestCase):

